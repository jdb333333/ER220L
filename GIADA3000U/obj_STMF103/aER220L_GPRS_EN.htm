<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj_STMF103\aER220L_GPRS_EN.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj_STMF103\aER220L_GPRS_EN.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Mon Oct 08 11:05:33 2018
<BR><P>
<H3>Maximum Stack Usage =       1456 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BarCode &rArr; ProcessKey &rArr; ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[288]">GPRSSendECR_HeartBeat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27c]">GPRSStartGprs</a><BR>
 <LI><a href="#[10f]">AppendEntry</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10f]">AppendEntry</a><BR>
 <LI><a href="#[185]">CheckInput</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[108]">ChnInput</a><BR>
 <LI><a href="#[223]">ProgSysFlag</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10c]">CheckFirmKey</a><BR>
 <LI><a href="#[175]">ListItems</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11e]">BarCode</a><BR>
 <LI><a href="#[10c]">CheckFirmKey</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10c]">CheckFirmKey</a><BR>
 <LI><a href="#[38a]">ProcessKeyMacro</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[389]">ProcessFunctions</a><BR>
 <LI><a href="#[387]">ProcessFuncLook</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[389]">ProcessFunctions</a><BR>
 <LI><a href="#[26d]">SuspendReceipt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[389]">ProcessFunctions</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b9]">Cut_Paper</a> from print_main.o(i.Cut_Paper) referenced from print_main.o(.constdata)
 <LI><a href="#[24]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">DispDept</a> from flowbill.o(i.DispDept) referenced from flowbill.o(.constdata)
 <LI><a href="#[70]">DispDirectDisc</a> from flowbill.o(i.DispDirectDisc) referenced from flowbill.o(.constdata)
 <LI><a href="#[79]">DispEcrNum</a> from flowbill.o(i.DispEcrNum) referenced from flowbill.o(.constdata)
 <LI><a href="#[69]">DispEnd</a> from flowbill.o(i.DispEnd) referenced from flowbill.o(.constdata)
 <LI><a href="#[76]">DispInsertIC</a> from flowbill.o(i.DispInsertIC) referenced from flowbill.o(.constdata)
 <LI><a href="#[74]">DispMessage</a> from flowbill.o(i.DispMessage) referenced from flowbill.o(.constdata)
 <LI><a href="#[6d]">DispModeLock</a> from flowbill.o(i.DispModeLock) referenced from flowbill.o(.constdata)
 <LI><a href="#[66]">DispNULL</a> from flowbill.o(i.DispNULL) referenced 2 times from flowbill.o(.constdata)
 <LI><a href="#[72]">DispNew</a> from flowbill.o(i.DispNew) referenced from flowbill.o(.constdata)
 <LI><a href="#[6a]">DispNonAdd</a> from flowbill.o(i.DispNonAdd) referenced from flowbill.o(.constdata)
 <LI><a href="#[6b]">DispOperator</a> from flowbill.o(i.DispOperator) referenced from flowbill.o(.constdata)
 <LI><a href="#[7b]">DispPbClose</a> from flowbill.o(i.DispPbClose) referenced from flowbill.o(.constdata)
 <LI><a href="#[7c]">DispPbOpen</a> from flowbill.o(i.DispPbOpen) referenced from flowbill.o(.constdata)
 <LI><a href="#[7d]">DispPbTransTo</a> from flowbill.o(i.DispPbTransTo) referenced from flowbill.o(.constdata)
 <LI><a href="#[6e]">DispPercentDisc</a> from flowbill.o(i.DispPercentDisc) referenced from flowbill.o(.constdata)
 <LI><a href="#[68]">DispPlu</a> from flowbill.o(i.DispPlu) referenced from flowbill.o(.constdata)
 <LI><a href="#[7e]">DispPoRa</a> from flowbill.o(i.DispPoRa) referenced from flowbill.o(.constdata)
 <LI><a href="#[75]">DispRPEnd</a> from flowbill.o(i.DispRPEnd) referenced from flowbill.o(.constdata)
 <LI><a href="#[77]">DispRefreshIC</a> from flowbill.o(i.DispRefreshIC) referenced from flowbill.o(.constdata)
 <LI><a href="#[78]">DispSetPrice</a> from flowbill.o(i.DispSetPrice) referenced from flowbill.o(.constdata)
 <LI><a href="#[71]">DispSubTotalDirDisc</a> from flowbill.o(i.DispSubTotalDirDisc) referenced from flowbill.o(.constdata)
 <LI><a href="#[6f]">DispSubTotalDisc</a> from flowbill.o(i.DispSubTotalDisc) referenced from flowbill.o(.constdata)
 <LI><a href="#[73]">DispSubTotals</a> from flowbill.o(i.DispSubTotals) referenced from flowbill.o(.constdata)
 <LI><a href="#[7f]">DispTAX</a> from flowbill.o(i.DispTAX) referenced from flowbill.o(.constdata)
 <LI><a href="#[6c]">DispTender</a> from flowbill.o(i.DispTender) referenced from flowbill.o(.constdata)
 <LI><a href="#[7a]">DispVoid</a> from flowbill.o(i.DispVoid) referenced from flowbill.o(.constdata)
 <LI><a href="#[5f]">DisplayChar</a> from chndisp.o(i.DisplayChar) referenced from monitor.o(i.InitMonitor)
 <LI><a href="#[5a]">DisplayNull</a> from firmkey.o(i.DisplayNull) referenced from firmkey.o(i.CheckMode)
 <LI><a href="#[59]">DisplayRecNo</a> from firmkey.o(i.DisplayRecNo) referenced from firmkey.o(i.CheckFirmKey)
 <LI><a href="#[58]">DisplaySetup</a> from firmkey.o(i.DisplaySetup) referenced 2 times from firmkey.o(i.CheckFirmKey)
 <LI><a href="#[58]">DisplaySetup</a> from firmkey.o(i.DisplaySetup) referenced from firmkey.o(i.DisplaySetup1stMenu)
 <LI><a href="#[58]">DisplaySetup</a> from firmkey.o(i.DisplaySetup) referenced from firmkey.o(i.DisplaySetup2ndMenu)
 <LI><a href="#[58]">DisplaySetup</a> from firmkey.o(i.DisplaySetup) referenced from report2.o(i.DisplayXZMenu)
 <LI><a href="#[b7]">Download_Image</a> from print_main.o(i.Download_Image) referenced from print_main.o(.constdata)
 <LI><a href="#[0]">EP1_IN_Callback</a> from usb_endp.o(i.EP1_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[2]">EP3_OUT_Callback</a> from usb_endp.o(i.EP3_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[1f]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI2_IRQHandler</a> from stm32f10x_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ae]">Excute_CR</a> from print_main.o(i.Excute_CR) referenced from print_main.o(.constdata)
 <LI><a href="#[af]">Excute_DLE</a> from print_main.o(i.Excute_DLE) referenced from print_main.o(.constdata)
 <LI><a href="#[aa]">Excute_ESC</a> from print_main.o(i.Excute_ESC) referenced from print_main.o(.constdata)
 <LI><a href="#[ad]">Excute_FF</a> from print_main.o(i.Excute_FF) referenced from print_main.o(.constdata)
 <LI><a href="#[ab]">Excute_GS</a> from print_main.o(i.Excute_GS) referenced from print_main.o(.constdata)
 <LI><a href="#[ac]">Excute_LF</a> from print_main.o(i.Excute_LF) referenced from print_main.o(.constdata)
 <LI><a href="#[1d]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[81]">GPRSSendECR_LOG_All</a> from gprs.o(i.GPRSSendECR_LOG_All) referenced from menu.o(.constdata)
 <LI><a href="#[87]">GPRS_DownloadALL</a> from gprs.o(i.GPRS_DownloadALL) referenced from menu.o(.constdata)
 <LI><a href="#[84]">GPRS_DownloadCLERK</a> from gprs.o(i.GPRS_DownloadCLERK) referenced from menu.o(.constdata)
 <LI><a href="#[83]">GPRS_DownloadDEPT</a> from gprs.o(i.GPRS_DownloadDEPT) referenced from menu.o(.constdata)
 <LI><a href="#[85]">GPRS_DownloadHEAD</a> from gprs.o(i.GPRS_DownloadHEAD) referenced from menu.o(.constdata)
 <LI><a href="#[82]">GPRS_DownloadPLU</a> from gprs.o(i.GPRS_DownloadPLU) referenced from menu.o(.constdata)
 <LI><a href="#[86]">GPRS_DownloadPTRAIL</a> from gprs.o(i.GPRS_DownloadPTRAIL) referenced from menu.o(.constdata)
 <LI><a href="#[88]">GPRS_Restart</a> from gprs.o(i.GPRS_Restart) referenced from menu.o(.constdata)
 <LI><a href="#[80]">GPRS_SetSendMode</a> from gprs.o(i.GPRS_SetSendMode) referenced from menu.o(.constdata)
 <LI><a href="#[11]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[96]">ListICBlock</a> from iccardblock.o(i.ListICBlock) referenced from menu.o(.constdata)
 <LI><a href="#[12]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 38 times from usb_istr.o(.data)
 <LI><a href="#[a3]">NewProgSysFlag</a> from program.o(i.NewProgSysFlag) referenced from menu.o(.constdata)
 <LI><a href="#[1a]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b8]">Print_Download_Image</a> from print_main.o(i.Print_Download_Image) referenced from print_main.o(.constdata)
 <LI><a href="#[1e]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a1]">ReadClerk</a> from clerk.o(i.ReadClerk) referenced from menu.o(.constdata)
 <LI><a href="#[91]">ReadCorrec</a> from correc.o(i.ReadCorrec) referenced from menu.o(.constdata)
 <LI><a href="#[93]">ReadCurr</a> from currency.o(i.ReadCurr) referenced from menu.o(.constdata)
 <LI><a href="#[8b]">ReadDept</a> from depart.o(i.ReadDept) referenced from menu.o(.constdata)
 <LI><a href="#[8f]">ReadDisc</a> from discount.o(i.ReadDisc) referenced from menu.o(.constdata)
 <LI><a href="#[94]">ReadDrawer</a> from drawer.o(i.ReadDrawer) referenced from menu.o(.constdata)
 <LI><a href="#[a2]">ReadFlagsList</a> from extmodules.o(i.ReadFlagsList) referenced from menu.o(.constdata)
 <LI><a href="#[a4]">ReadFromMsg</a> from menu.o(i.ReadFromMsg) referenced 8 times from menu.o(.constdata)
 <LI><a href="#[a8]">ReadFuncLook</a> from extmodules.o(i.ReadFuncLook) referenced from menu.o(.constdata)
 <LI><a href="#[9a]">ReadGraphic</a> from extmodules.o(i.ReadGraphic) referenced from menu.o(.constdata)
 <LI><a href="#[8a]">ReadGroup</a> from group.o(i.ReadGroup) referenced from menu.o(.constdata)
 <LI><a href="#[97]">ReadHeader</a> from extmodules.o(i.ReadHeader) referenced from menu.o(.constdata)
 <LI><a href="#[8d]">ReadKP</a> from kp.o(i.ReadKP) referenced from menu.o(.constdata)
 <LI><a href="#[a5]">ReadKeyDesList</a> from extmodules.o(i.ReadKeyDesList) referenced from menu.o(.constdata)
 <LI><a href="#[a7]">ReadKeyMacro</a> from extmodules.o(i.ReadKeyMacro) referenced from menu.o(.constdata)
 <LI><a href="#[a0]">ReadModi</a> from modifier.o(i.ReadModi) referenced from menu.o(.constdata)
 <LI><a href="#[a6]">ReadNumric</a> from extmodules.o(i.ReadNumric) referenced from menu.o(.constdata)
 <LI><a href="#[8e]">ReadOFFPrice</a> from offprice.o(i.ReadOFFPrice) referenced from menu.o(.constdata)
 <LI><a href="#[9e]">ReadPBTable</a> from pb.o(i.ReadPBTable) referenced from menu.o(.constdata)
 <LI><a href="#[9f]">ReadPbF</a> from pb.o(i.ReadPbF) referenced from menu.o(.constdata)
 <LI><a href="#[8c]">ReadPlu</a> from plu.o(i.ReadPlu) referenced from menu.o(.constdata)
 <LI><a href="#[a9]">ReadPluStock</a> from plu.o(i.ReadPluStock) referenced from menu.o(.constdata)
 <LI><a href="#[90]">ReadPoRa</a> from pora.o(i.ReadPoRa) referenced from menu.o(.constdata)
 <LI><a href="#[9c]">ReadRepUnit</a> from extmodules.o(i.ReadRepUnit) referenced from menu.o(.constdata)
 <LI><a href="#[99]">ReadSlipHeader</a> from extmodules.o(i.ReadSlipHeader) referenced from menu.o(.constdata)
 <LI><a href="#[95]">ReadTax</a> from tax.o(i.ReadTax) referenced from menu.o(.constdata)
 <LI><a href="#[92]">ReadTender</a> from tender.o(i.ReadTender) referenced from menu.o(.constdata)
 <LI><a href="#[98]">ReadTrail</a> from extmodules.o(i.ReadTrail) referenced from menu.o(.constdata)
 <LI><a href="#[9b]">ReadXZReport</a> from extmodules.o(i.ReadXZReport) referenced from menu.o(.constdata)
 <LI><a href="#[9d]">ReadZone</a> from extmodules.o(i.ReadZone) referenced from menu.o(.constdata)
 <LI><a href="#[f]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">SDIO_IRQHandler</a> from stm32f10x_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[5d]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[5b]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[18]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1b]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM2_IRQHandler</a> from print_main.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM3_IRQHandler</a> from print_main.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">TIM6_IRQHandler</a> from led_customer.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">TIM7_IRQHandler</a> from keyboard.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[89]">TestSendMess</a> from gprs.o(i.TestSendMess) referenced from menu.o(.constdata)
 <LI><a href="#[4d]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">UART_GetChar</a> from usart.o(i.UART_GetChar) referenced from monitor.o(i.InitMonitor)
 <LI><a href="#[60]">UART_PutChar</a> from usart.o(i.UART_PutChar) referenced from monitor.o(i.InitMonitor)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from stm32f10x_it.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from stm32f10x_it.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">USBWakeUp_IRQHandler</a> from stm32f10x_it.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">UpdateBIOS</a> from ecr_iap.o(i.UpdateBIOS) referenced from computer.o(i.ProcessRecord)
 <LI><a href="#[14]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">Virtual_Com_Port_Data_Setup</a> from usb_prop.o(i.Virtual_Com_Port_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">Virtual_Com_Port_GetConfigDescriptor</a> from usb_prop.o(i.Virtual_Com_Port_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">Virtual_Com_Port_GetDeviceDescriptor</a> from usb_prop.o(i.Virtual_Com_Port_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[62]">Virtual_Com_Port_GetLineCoding</a> from usb_prop.o(i.Virtual_Com_Port_GetLineCoding) referenced from usb_prop.o(i.Virtual_Com_Port_Data_Setup)
 <LI><a href="#[c]">Virtual_Com_Port_GetStringDescriptor</a> from usb_prop.o(i.Virtual_Com_Port_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">Virtual_Com_Port_Get_Interface_Setting</a> from usb_prop.o(i.Virtual_Com_Port_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[8]">Virtual_Com_Port_NoData_Setup</a> from usb_prop.o(i.Virtual_Com_Port_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4]">Virtual_Com_Port_Reset</a> from usb_prop.o(i.Virtual_Com_Port_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d]">Virtual_Com_Port_SetConfiguration</a> from usb_prop.o(i.Virtual_Com_Port_SetConfiguration) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">Virtual_Com_Port_SetDeviceAddress</a> from usb_prop.o(i.Virtual_Com_Port_SetDeviceAddress) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[63]">Virtual_Com_Port_SetLineCoding</a> from usb_prop.o(i.Virtual_Com_Port_SetLineCoding) referenced from usb_prop.o(i.Virtual_Com_Port_Data_Setup)
 <LI><a href="#[5]">Virtual_Com_Port_Status_In</a> from usb_prop.o(i.Virtual_Com_Port_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[6]">Virtual_Com_Port_Status_Out</a> from usb_prop.o(i.Virtual_Com_Port_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[3]">Virtual_Com_Port_init</a> from usb_prop.o(i.Virtual_Com_Port_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[19]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[64]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[65]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[55]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[b3]">partial_cut</a> from print_main.o(i.partial_cut) referenced from print_main.o(.constdata)
 <LI><a href="#[b0]">sel_print_mode</a> from print_main.o(i.sel_print_mode) referenced from print_main.o(.constdata)
 <LI><a href="#[b6]">sel_raster_bit_image</a> from print_main.o(i.sel_raster_bit_image) referenced from print_main.o(.constdata)
 <LI><a href="#[b2]">total_cut</a> from print_main.o(i.total_cut) referenced from print_main.o(.constdata)
 <LI><a href="#[b1]">turn_underline_mode</a> from print_main.o(i.turn_underline_mode) referenced from print_main.o(.constdata)
 <LI><a href="#[b4]">tx_printer_status</a> from print_main.o(i.tx_printer_status) referenced from print_main.o(.constdata)
 <LI><a href="#[b5]">tx_status</a> from print_main.o(i.tx_status) referenced from print_main.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[57]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[42c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ba]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[42d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[42e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[42f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[430]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[431]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULong64toASC
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WriteBuffer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_ReadBuffer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallScreen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStr_Right
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupScreen
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbBuffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePort
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTender
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTax
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPort
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoRa
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOFFPrice
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModifier
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroup
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrawer
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurr
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCorrec
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitClerk
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadECRVIPVar
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeProto
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputByListItems
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbTransTo
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbOpen
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperator
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNonAdd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPort
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlagsList
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbNumber
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTrailer
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSlipHead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteHeader
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualInputStr
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTender
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRa
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlu
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbF
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPb
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroup
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawer
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDisc
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrency
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectGraphic
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange2Port
</UL>

<P><STRONG><a name="[400]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
</UL>

<P><STRONG><a name="[432]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStr_Right
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintModifiers
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeGRBToMyself
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCustomer
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDirDisc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbOpen
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperator
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNonAdd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDirectDisc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlagsList
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortRate
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicePort
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRange
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlu
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[433]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[434]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_ApplRam
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKeyMacro
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearApplMemory
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu_At
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTrailer
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSlipHead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteHeader
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Initial
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
</UL>

<P><STRONG><a name="[435]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1f9]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDirDisc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDirectDisc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[1d3]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
</UL>

<P><STRONG><a name="[12c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendScreen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStr_Right
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotal
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModifier
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroup
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitClerk
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeProto
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSend_ATE0
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSIM_Exist
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReset
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRegisterTCPIP
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSHand
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnectAPN
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCloseTCPIP
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCheckACK
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbTransTo
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbOpen
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperator
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNonAdd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGraphic
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlagsList
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectGraphic
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
</UL>

<P><STRONG><a name="[27f]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[1ae]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
</UL>

<P><STRONG><a name="[150]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintModifiers
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKeyMacro
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgZone
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbInfo
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgModi
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDraw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCorrec
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadItemCaption
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeyCode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadXZReport
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTrail
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSlipHeader
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRepUnit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyMacro
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyDesList
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHeader
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGraphic
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlagsList
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToTypeName
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvertBit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPluStock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromMsg
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKP
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
</UL>

<P><STRONG><a name="[1a2]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[c2]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputEXASCII
</UL>

<P><STRONG><a name="[436]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[437]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[438]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[439]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[406]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bb]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[43a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[43b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[c6]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ca]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d1]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[43c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>ADC1_DMA_Config</STRONG> (Thumb, 182 bytes, Stack size 72 bytes, pwr_ctrl.o(i.ADC1_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ADC1_DMA_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_Init
</UL>

<P><STRONG><a name="[339]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrADCCtrl
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
</UL>

<P><STRONG><a name="[419]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrADCCtrl
</UL>

<P><STRONG><a name="[d9]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
</UL>

<P><STRONG><a name="[da]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
</UL>

<P><STRONG><a name="[33a]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrADCCtrl
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
</UL>

<P><STRONG><a name="[280]"></a>ASC_2_HEX</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gprs.o(i.ASC_2_HEX))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[db]"></a>Add</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, extmodules.o(i.Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Add &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBCDValue12
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_BCDValue1
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBCDValue12
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxItem
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTotal
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTender
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDirDisc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDirectDisc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDept
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddReceiptNumber
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPb
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[dd]"></a>AddBCDValue12</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, extmodules.o(i.AddBCDValue12))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddBCDValue12
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
</UL>

<P><STRONG><a name="[e0]"></a>AddCorrecTotal</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, correc.o(i.AddCorrecTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddCorrecTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCorrecOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
</UL>

<P><STRONG><a name="[e3]"></a>AddCurrTotal</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, currency.o(i.AddCurrTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddCurrTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrOffSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[e5]"></a>AddDeptTotal</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, depart.o(i.AddDeptTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddDeptTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeptOffSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
</UL>

<P><STRONG><a name="[e7]"></a>AddDiscTotal</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, discount.o(i.AddDiscTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddDiscTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiscOffSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
</UL>

<P><STRONG><a name="[e9]"></a>AddDrawerTotal</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drawer.o(i.AddDrawerTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddDrawerTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawerOffSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
</UL>

<P><STRONG><a name="[eb]"></a>AddGroupTotal</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, group.o(i.AddGroupTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddGroupTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
</UL>

<P><STRONG><a name="[ed]"></a>AddNewECRVIP</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, iccard.o(i.AddNewECRVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AddNewECRVIP &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashProgram
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncordDate
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
</UL>

<P><STRONG><a name="[f1]"></a>AddPbFTotal</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, pb.o(i.AddPbFTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddPbFTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbFOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[f3]"></a>AddPbtTotal</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, pb.o(i.AddPbtTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddPbtTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbtOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[f5]"></a>AddPluTotal</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, plu.o(i.AddPluTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddPluTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
</UL>

<P><STRONG><a name="[f7]"></a>AddPoRaTotal</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, pora.o(i.AddPoRaTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddPoRaTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPoRaOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
</UL>

<P><STRONG><a name="[e2]"></a>AddPointerTotal</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, general.o(i.AddPointerTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTenderTotal
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPoRaTotal
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbtTotal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbFTotal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscTotal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurrTotal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxTotal
</UL>

<P><STRONG><a name="[fa]"></a>AddReceiptNumber</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fiscal.o(i.AddReceiptNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AddReceiptNumber &rArr; Add &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
</UL>

<P><STRONG><a name="[fb]"></a>AddTaxItem</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tax.o(i.AddTaxItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AddTaxItem &rArr; Add &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
</UL>

<P><STRONG><a name="[fc]"></a>AddTaxTotal</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tax.o(i.AddTaxTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddTaxTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaxOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
</UL>

<P><STRONG><a name="[fe]"></a>AddTenderTotal</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tender.o(i.AddTenderTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddTenderTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTenderOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[f9]"></a>AddTotal</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, general.o(i.AddTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
</UL>

<P><STRONG><a name="[103]"></a>Add_New_PLU</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, plu.o(i.Add_New_PLU))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = Add_New_PLU &rArr; CheckFirmKey &rArr;  CheckFirmKey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[269]"></a>AmtInputMask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.AmtInputMask))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[10e]"></a>AmtRound</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, tax.o(i.AmtRound))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AmtRound &rArr; Add &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewBal
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundTaxable
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[10f]"></a>AppendEntry</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, extmodules.o(i.AppendEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = AppendEntry &rArr;  AppendEntry (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
</UL>

<P><STRONG><a name="[2ae]"></a>BCD4toWORD</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, extmodules.o(i.BCD4toWORD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BCD4toWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
</UL>

<P><STRONG><a name="[112]"></a>BCDDateTimeToStr</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, extmodules.o(i.BCDDateTimeToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BCDDateTimeToStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
</UL>

<P><STRONG><a name="[1cc]"></a>BCDValueToLong64</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, extmodules.o(i.BCDValueToLong64))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BCDValueToLong64
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
</UL>

<P><STRONG><a name="[1cd]"></a>BCDValueToULong</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, extmodules.o(i.BCDValueToULong))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BCDValueToULong
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[124]"></a>BCDValue_DIV_10</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, extmodules.o(i.BCDValue_DIV_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BCDValue_DIV_10
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_BCDValue1
</UL>

<P><STRONG><a name="[dc]"></a>BCDValue_MUL_10</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, extmodules.o(i.BCDValue_MUL_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BCDValue_MUL_10
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
</UL>

<P><STRONG><a name="[359]"></a>BCDWidth</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, extmodules.o(i.BCDWidth))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>

<P><STRONG><a name="[426]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[427]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[114]"></a>BackupScreen</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, chndisp.o(i.BackupScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BackupScreen &rArr; mClearScreen &rArr; GotoXY &rArr; mEnCursor &rArr; mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[115]"></a>BalanceCMD</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, balance.o(i.BalanceCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BalanceCMD &rArr; EmptyComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[118]"></a>BalanceWeight</STRONG> (Thumb, 720 bytes, Stack size 16 bytes, balance.o(i.BalanceWeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = BalanceWeight &rArr; ProcessKey &rArr; ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>BarCode</STRONG> (Thumb, 532 bytes, Stack size 16 bytes, barcode.o(i.BarCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = BarCode &rArr; ProcessKey &rArr; ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInStore
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[209]"></a>Bcd2Long</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, extmodules.o(i.Bcd2Long))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bcd2Long
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
</UL>

<P><STRONG><a name="[123]"></a>BcdDiv10</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, extmodules.o(i.BcdDiv10))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BcdDiv10 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_DIV_10
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDept
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBCDPoint
</UL>

<P><STRONG><a name="[156]"></a>BcdDiv100</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, extmodules.o(i.BcdDiv100))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFuncLook
</UL>

<P><STRONG><a name="[125]"></a>BcdMul10</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, extmodules.o(i.BcdMul10))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BcdMul10 &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeQty
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBCDPoint
</UL>

<P><STRONG><a name="[155]"></a>BcdMul100</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, extmodules.o(i.BcdMul100))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>

<P><STRONG><a name="[126]"></a>Beep</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, interface.o(i.Beep))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>

<P><STRONG><a name="[11c]"></a>Bell</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, interface.o(i.Bell))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Bell
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Paper
</UL>

<P><STRONG><a name="[127]"></a>BinarySearch</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, search.o(i.BinarySearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BinarySearch &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
</UL>

<P><STRONG><a name="[12a]"></a>Bios</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, interface.o(i.Bios))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrintEx
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrinter
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[12e]"></a>Bios_1</STRONG> (Thumb, 602 bytes, Stack size 40 bytes, interface.o(i.Bios_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_settime
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_gettime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO_Saved
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableBeep
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKeyboard
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRtc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimeDate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
</UL>

<P><STRONG><a name="[137]"></a>Bios_PortRead</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, usart.o(i.Bios_PortRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitOnLine
</UL>

<P><STRONG><a name="[139]"></a>Bios_PortWrite</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, usart.o(i.Bios_PortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendByte
</UL>

<P><STRONG><a name="[13b]"></a>Bios_TestMAC</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, interface.o(i.Bios_TestMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bios_TestMAC &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[2ba]"></a>Btoa</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, progopt.o(i.Btoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Btoa
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d5]"></a>ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[13d]"></a>CDC_Receive_DATA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(i.CDC_Receive_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CDC_Receive_DATA &rArr; SetEPRxValid
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_COMM_Ready
</UL>

<P><STRONG><a name="[13f]"></a>CDC_Send_DATA</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hw_config.o(i.CDC_Send_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CDC_Send_DATA &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxValid
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSB
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSBString
</UL>

<P><STRONG><a name="[143]"></a>CTR_LP</STRONG> (Thumb, 616 bytes, Stack size 8 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[147]"></a>CalculateSubDisc</STRONG> (Thumb, 1614 bytes, Stack size 88 bytes, discount.o(i.CalculateSubDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = CalculateSubDisc &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
</UL>

<P><STRONG><a name="[14c]"></a>CalculateTax</STRONG> (Thumb, 1188 bytes, Stack size 648 bytes, tax.o(i.CalculateTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundTaxable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxTotal
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[14a]"></a>CalculateTax2</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, tax.o(i.CalculateTax2))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CalculateTax2 &rArr; Divide &rArr; CompareBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
</UL>

<P><STRONG><a name="[161]"></a>CenterForDisplay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, extmodules.o(i.CenterForDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[153]"></a>ChangeGRBToMyself</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, print_main.o(i.ChangeGRBToMyself))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ChangeGRBToMyself
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
</UL>

<P><STRONG><a name="[154]"></a>ChangePoint</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, extmodules.o(i.ChangePoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ChangePoint &rArr; BcdDiv10 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul100
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv100
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[157]"></a>ChangePoint2</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, extmodules.o(i.ChangePoint2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ChangePoint2 &rArr; BcdDiv10 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul100
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[158]"></a>ChangeQty</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, flowbill.o(i.ChangeQty))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ChangeQty &rArr; BcdMul10 &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
</UL>

<P><STRONG><a name="[159]"></a>CheckBitValue</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, program.o(i.CheckBitValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CheckBitValue &rArr; DisplayDecXY &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTrailer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgReport
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHeader
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBarcodeReader
</UL>

<P><STRONG><a name="[15c]"></a>CheckBreak</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, report.o(i.CheckBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = CheckBreak &rArr; CheckBreakKey &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakKey
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[15d]"></a>CheckBreakKey</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, general.o(i.CheckBreakKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CheckBreakKey &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreak
</UL>

<P><STRONG><a name="[35c]"></a>CheckChar</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, print.o(i.CheckChar))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlip
</UL>

<P><STRONG><a name="[119]"></a>CheckComm</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, extmodules.o(i.CheckComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CheckComm &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
</UL>

<P><STRONG><a name="[109]"></a>CheckError</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, general.o(i.CheckError))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CheckError &rArr; mDrawABox &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CenterForDisplay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>CheckFirmKey</STRONG> (Thumb, 3374 bytes, Stack size 16 bytes, firmkey.o(i.CheckFirmKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + In Cycle
<LI>Call Chain = CheckFirmKey &rArr;  CheckFirmKey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Plu_XReport
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup2ndMenu
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup1stMenu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[184]"></a>CheckFunctionEntry</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, main.o(i.CheckFunctionEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CheckFunctionEntry &rArr; GetWordEntry &rArr; CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[122]"></a>CheckInStore</STRONG> (Thumb, 490 bytes, Stack size 8 bytes, barcode.o(i.CheckInStore))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckInStore &rArr; StrToBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[185]"></a>CheckInput</STRONG> (Thumb, 460 bytes, Stack size 16 bytes, chninput.o(i.CheckInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputEXASCII
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumric
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
</UL>

<P><STRONG><a name="[136]"></a>CheckKeyboard</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, keyboard.o(i.CheckKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckKeyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOn
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[18b]"></a>CheckLogBuff</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, flowbill.o(i.CheckLogBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
</UL>

<P><STRONG><a name="[18c]"></a>CheckMaxEntry</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, general.o(i.CheckMaxEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CheckMaxEntry &rArr; CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
</UL>

<P><STRONG><a name="[18e]"></a>CheckMixMatch</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, plu.o(i.CheckMixMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = CheckMixMatch &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscTotal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiscOffSet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
</UL>

<P><STRONG><a name="[190]"></a>CheckMode</STRONG> (Thumb, 2288 bytes, Stack size 24 bytes, firmkey.o(i.CheckMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = CheckMode &rArr; MGFunctions &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPort
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrePrintHead
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayXZMenu
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup1stMenu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JFeed
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
</UL>

<P><STRONG><a name="[19f]"></a>CheckModifier</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, buffer.o(i.CheckModifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = CheckModifier &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[16d]"></a>CheckMultiply</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, fixed.o(i.CheckMultiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CheckMultiply &rArr; ClearEntry &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[14d]"></a>CheckNotZero</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, extmodules.o(i.CheckNotZero))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTotal
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[1ac]"></a>CheckOnLine</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, extmodules.o(i.CheckOnLine))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[199]"></a>CheckPWD</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, extmodules.o(i.CheckPWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CheckPWD &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CenterForDisplay
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[16a]"></a>CheckPluFile</STRONG> (Thumb, 1178 bytes, Stack size 144 bytes, hardtest.o(i.CheckPluFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = CheckPluFile &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWRand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[1a5]"></a>CheckPrinter</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main.o(i.CheckPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CheckPrinter &rArr; ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>CheckRandomPlu</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, plu.o(i.CheckRandomPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = CheckRandomPlu &rArr; PrintQty &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu_At
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[1ab]"></a>CheckSlip</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, print.o(i.CheckSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CheckSlip &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOnLine
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[375]"></a>CheckSum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, interface.o(i.CheckSum))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
</UL>

<P><STRONG><a name="[193]"></a>CheckTime</STRONG> (Thumb, 920 bytes, Stack size 48 bytes, timer.o(i.CheckTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOff
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b1]"></a>CheckTotal</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, report.o(i.CheckTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodSkip
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
</UL>

<P><STRONG><a name="[1d0]"></a>CheckUSB</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_endp.o(i.CheckUSB))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSBRecord
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUSBRecord
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
</UL>

<P><STRONG><a name="[1b3]"></a>Check_Paper</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, print_main.o(i.Check_Paper))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
</UL>

<P><STRONG><a name="[1b4]"></a>Check_Print</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, print_main.o(i.Check_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Check_Print
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TESTPAPER
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>ChnInput</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, chninput.o(i.ChnInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMess
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>

<P><STRONG><a name="[2e4]"></a>CleanKeyboard</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, keyboard.o(i.CleanKeyboard))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[174]"></a>ClearAllReport</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, report2.o(i.ClearAllReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePluInventory
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[1b9]"></a>ClearApplMemory</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, initappl.o(i.ClearApplMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearApplMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[3d8]"></a>ClearDTOG_RX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[3d6]"></a>ClearDTOG_TX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[104]"></a>ClearEntry</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, general.o(i.ClearEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ClearEntry &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputByListItems
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Plu_XReport
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[1db]"></a>ClearFlashChar</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, print.o(i.ClearFlashChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearFlashChar
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
</UL>

<P><STRONG><a name="[170]"></a>ClearLine</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, chndisp.o(i.ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ClearLine &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>

<P><STRONG><a name="[1ba]"></a>ClearLogFor</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, flowbill.o(i.ClearLogFor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ClearLogFor &rArr; ReadFrLogRam &rArr; bFlashReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrLogRam
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLogRam
</UL>

<P><STRONG><a name="[1bc]"></a>ClearPb</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, pb.o(i.ClearPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ClearPb &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[2e5]"></a>ClearVirtualInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(i.ClearVirtualInput))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
</UL>

<P><STRONG><a name="[3fd]"></a>Clear_Status_Out</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[1bd]"></a>CloseGPRS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gprs.o(i.CloseGPRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CloseGPRS &rArr; GPRSCloseTCPIP &rArr; GPRSWaitForOK &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCloseTCPIP
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[168]"></a>ClsArea</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, chndisp.o(i.ClsArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ClsArea &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
</UL>

<P><STRONG><a name="[121]"></a>ClsState1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, chndisp.o(i.ClsState1))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPointerTotal
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Paper
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[110]"></a>ClsState12</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, chndisp.o(i.ClsState12))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ClsState12 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup2ndMenu
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup1stMenu
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[120]"></a>ClsState2</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, chndisp.o(i.ClsState2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTotal
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrinter
</UL>

<P><STRONG><a name="[1bf]"></a>ClsXRam</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, interface.o(i.ClsXRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ClsXRam &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>

<P><STRONG><a name="[1c4]"></a>CmdExtPrinter</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, kp.o(i.CmdExtPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CmdExtPrinter &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendExtPrinter
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutExtPrinter
</UL>

<P><STRONG><a name="[1ad]"></a>CmdSlip</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, print.o(i.CmdSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CmdSlip &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSlip
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlip
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedSlip
</UL>

<P><STRONG><a name="[14f]"></a>Collect_Data</STRONG> (Thumb, 2212 bytes, Stack size 56 bytes, flowbill.o(i.Collect_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Collect_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLogRam
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeQty
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToLong64
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[3e3]"></a>Collect_Given</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, flowbill.o(i.Collect_Given))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[1e4]"></a>CombineWith4</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, print_main.o(i.CombineWith4))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
</UL>

<P><STRONG><a name="[1e3]"></a>CombineWith8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, print_main.o(i.CombineWith8))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
</UL>

<P><STRONG><a name="[18d]"></a>CompareBCD</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, extmodules.o(i.CompareBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMaxEntry
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
</UL>

<P><STRONG><a name="[129]"></a>CompareBCDValue</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, extmodules.o(i.CompareBCDValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CompareBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbNumber
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[1cf]"></a>Computer</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, computer.o(i.Computer))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Computer &rArr; ProcessRecord &rArr; GetReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSB
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUSB
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUSB
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_COMM_Ready
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>Correct_BCDValue1</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, extmodules.o(i.Correct_BCDValue1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Correct_BCDValue1 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_DIV_10
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
</UL>

<P><STRONG><a name="[1d6]"></a>Correction</STRONG> (Thumb, 856 bytes, Stack size 8 bytes, correc.o(i.Correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = Correction &rArr; ProcessPlu &rArr; ProcessOnePlu &rArr; ProcessDept &rArr; Tender &rArr; ProcessBuffer &rArr; ProBuf &rArr; RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFlashChar
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
</UL>

<P><STRONG><a name="[1dd]"></a>CreatGraphicWithText</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, print_main.o(i.CreatGraphicWithText))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Group
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontOffset_char
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task03_PrintGraphic
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
</UL>

<P><STRONG><a name="[1df]"></a>Create384Dots</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, print_main.o(i.Create384Dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create384Dots
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CombineWith8
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CombineWith4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>

<P><STRONG><a name="[1e5]"></a>CreateGraphicDots</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, print_main.o(i.CreateGraphicDots))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CreateGraphicDots &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Group
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task03_PrintGraphic
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
</UL>

<P><STRONG><a name="[1e6]"></a>Currency</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, currency.o(i.Currency))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = Currency &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[1e9]"></a>CutExtPrinter</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, kp.o(i.CutExtPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CutExtPrinter &rArr; CmdExtPrinter &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrePrintHead
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[b9]"></a>Cut_Paper</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, print_main.o(i.Cut_Paper))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Cut_Paper &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
</UL>

<P><STRONG><a name="[d6]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
</UL>

<P><STRONG><a name="[d7]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
</UL>

<P><STRONG><a name="[1f0]"></a>DateTimeToStr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, extmodules.o(i.DateTimeToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = DateTimeToStr &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
</UL>

<P><STRONG><a name="[2af]"></a>DaysAMonth</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, extmodules.o(i.DaysAMonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DaysAMonth
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
</UL>

<P><STRONG><a name="[1f1]"></a>DeCodeProto</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, port.o(i.DeCodeProto))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeCodeProto
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
</UL>

<P><STRONG><a name="[1f2]"></a>DeDateToStr</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, extmodules.o(i.DeDateToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DeDateToStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
</UL>

<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[319]"></a>DecRecIndex</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu.o(i.DecRecIndex))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[1f3]"></a>DeleteHeader</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, program.o(i.DeleteHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeleteHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[1f4]"></a>DeleteSlipHead</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, program.o(i.DeleteSlipHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeleteSlipHead
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[1f5]"></a>DeleteTrailer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, program.o(i.DeleteTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeleteTrailer
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[297]"></a>DeptPluKeysCount</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, extmodules.o(i.DeptPluKeysCount))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
</UL>

<P><STRONG><a name="[1d9]"></a>Discount</STRONG> (Thumb, 2610 bytes, Stack size 48 bytes, discount.o(i.Discount))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Discount &rArr; RegiStart &rArr; RegiInit &rArr; PrintHead1 &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscTotal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbBuffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxItem
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[1e8]"></a>DispAmtStr</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, format.o(i.DispAmtStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DispAmtStr &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTotal
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[186]"></a>DispCharXY</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, chndisp.o(i.DispCharXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputEXASCII
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[200]"></a>DispDateRecNo</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, flowbill.o(i.DispDateRecNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>

<P><STRONG><a name="[67]"></a>DispDept</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, flowbill.o(i.DispDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = DispDept &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>DispDirectDisc</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, flowbill.o(i.DispDirectDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = DispDirectDisc &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[202]"></a>DispDrawerTotal</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, drawer.o(i.DispDrawerTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DispDrawerTotal &rArr; DisplayPointerTotal &rArr; DisplayTotal &rArr; ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPointerTotal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawerOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[79]"></a>DispEcrNum</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispEcrNum))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>DispEnd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, flowbill.o(i.DispEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = DispEnd &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>DispGrandTotal</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, report.o(i.DispGrandTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DispGrandTotal &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
</UL>

<P><STRONG><a name="[206]"></a>DispIndex</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, menu.o(i.DispIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DispIndex &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[76]"></a>DispInsertIC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispInsertIC))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>DispLFStr</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, chndisp.o(i.DispLFStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispLFStr &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
</UL>

<P><STRONG><a name="[74]"></a>DispMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispMessage))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>DispModeLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispModeLock))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>DispNULL</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispNULL))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>DispNew</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, flowbill.o(i.DispNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = DispNew &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDDateTimeToStr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>DispNonAdd</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, flowbill.o(i.DispNonAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = DispNonAdd &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULong64toASC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>DispOperator</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, flowbill.o(i.DispOperator))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DispOperator &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>DispPbClose</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flowbill.o(i.DispPbClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = DispPbClose &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>DispPbOpen</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, flowbill.o(i.DispPbOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = DispPbOpen &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>DispPbTransTo</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, flowbill.o(i.DispPbTransTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = DispPbTransTo &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>DispPercentDisc</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, flowbill.o(i.DispPercentDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = DispPercentDisc &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>DispPlu</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, flowbill.o(i.DispPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = DispPlu &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Long
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>DispPoRa</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, flowbill.o(i.DispPoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = DispPoRa &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>DispQtyStr</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, format.o(i.DispQtyStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DispQtyStr &rArr; FormatQty &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPluStock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[75]"></a>DispRPEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispRPEnd))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>DispRefreshIC</STRONG> (Thumb, 964 bytes, Stack size 32 bytes, flowbill.o(i.DispRefreshIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = DispRefreshIC &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongtoASCL
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>DispSetPrice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispSetPrice))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>DispStrXY</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, chndisp.o(i.DispStrXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputEXASCII
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStr_Right
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLFStr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPointerTotal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotal
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_Config
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_ApplRam
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG_All
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReset
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTotal
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgZone
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTrailer
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHeader
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvertBit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortRate
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicePort
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIndex
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Paper
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
</UL>

<P><STRONG><a name="[20b]"></a>DispStr_Right</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, chndisp.o(i.DispStr_Right))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DispStr_Right &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
</UL>

<P><STRONG><a name="[1fc]"></a>DispSubTotal</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, extmodules.o(i.DispSubTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispSubTotal &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
</UL>

<P><STRONG><a name="[71]"></a>DispSubTotalDirDisc</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, flowbill.o(i.DispSubTotalDirDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = DispSubTotalDirDisc &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>DispSubTotalDisc</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, flowbill.o(i.DispSubTotalDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = DispSubTotalDisc &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>DispSubTotals</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, flowbill.o(i.DispSubTotals))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = DispSubTotals &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>DispTAX</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, flowbill.o(i.DispTAX))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = DispTAX &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>DispTender</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, flowbill.o(i.DispTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = DispTender &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>DispVoid</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flowbill.o(i.DispVoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = DispVoid &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>DisplayChar</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, chndisp.o(i.DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DisplayChar &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(i.InitMonitor)
</UL>
<P><STRONG><a name="[15b]"></a>DisplayDecXY</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, extmodules.o(i.DisplayDecXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisplayDecXY &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WidthofWORD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[20d]"></a>DisplayECRVIP</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, iccard.o(i.DisplayECRVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DisplayECRVIP &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASCX0
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
</UL>

<P><STRONG><a name="[5a]"></a>DisplayNull</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, firmkey.o(i.DisplayNull))
<BR>[Address Reference Count : 1]<UL><LI> firmkey.o(i.CheckMode)
</UL>
<P><STRONG><a name="[169]"></a>DisplayOption</STRONG> (Thumb, 1452 bytes, Stack size 16 bytes, firmkey.o(i.DisplayOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = DisplayOption &rArr; ProgKeyMacro &rArr; SelectKeyCode &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgZone
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTrailer
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysMes
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlipHead
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSalPer
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgReport
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbInfo
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgModi
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHost
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHeader
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDraw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCorrec
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBarcodeReader
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintICMessage
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitECRVIP
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[203]"></a>DisplayPointerTotal</STRONG> (Thumb, 434 bytes, Stack size 16 bytes, general.o(i.DisplayPointerTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DisplayPointerTotal &rArr; DisplayTotal &rArr; ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDrawerTotal
</UL>

<P><STRONG><a name="[23e]"></a>DisplayPrompt</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, general.o(i.DisplayPrompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = DisplayPrompt &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CenterForDisplay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
</UL>

<P><STRONG><a name="[59]"></a>DisplayRecNo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, firmkey.o(i.DisplayRecNo))
<BR>[Address Reference Count : 1]<UL><LI> firmkey.o(i.CheckFirmKey)
</UL>
<P><STRONG><a name="[58]"></a>DisplaySetup</STRONG> (Thumb, 1060 bytes, Stack size 40 bytes, firmkey.o(i.DisplaySetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayXZMenu
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup2ndMenu
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup1stMenu
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>
<BR>[Address Reference Count : 4]<UL><LI> report2.o(i.DisplayXZMenu)
<LI> firmkey.o(i.DisplaySetup1stMenu)
<LI> firmkey.o(i.DisplaySetup2ndMenu)
<LI> firmkey.o(i.CheckFirmKey)
</UL>
<P><STRONG><a name="[183]"></a>DisplaySetup1stMenu</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, firmkey.o(i.DisplaySetup1stMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DisplaySetup1stMenu &rArr; DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[173]"></a>DisplaySetup2ndMenu</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, firmkey.o(i.DisplaySetup2ndMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DisplaySetup2ndMenu &rArr; DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[23d]"></a>DisplayTotal</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, general.o(i.DisplayTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisplayTotal &rArr; ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPointerTotal
</UL>

<P><STRONG><a name="[19a]"></a>DisplayXZMenu</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, report2.o(i.DisplayXZMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DisplayXZMenu &rArr; DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[23f]"></a>Display_RGBuf</STRONG> (Thumb, 724 bytes, Stack size 72 bytes, extmodules.o(i.Display_RGBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Display_RGBuf &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[149]"></a>Divide</STRONG> (Thumb, 514 bytes, Stack size 88 bytes, extmodules.o(i.Divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Divide &rArr; CompareBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBCDValue12
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_BCDValue1
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBCDValue12
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[38e]"></a>DowmLoadBINCLIB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, computer.o(i.DowmLoadBINCLIB))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[240]"></a>DowmLoadGRB</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, computer.o(i.DowmLoadGRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DowmLoadGRB &rArr; ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeGRBToMyself
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[b7]"></a>Download_Image</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, print_main.o(i.Download_Image))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Download_Image &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[242]"></a>Drawer</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, drawer.o(i.Drawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Drawer &rArr; ClearEntry &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawerOffSet
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[327]"></a>DrawerOpen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, interface.o(i.DrawerOpen))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
</UL>

<P><STRONG><a name="[31f]"></a>Drive_Motor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, print_main.o(i.Drive_Motor))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Motor
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Motor
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
</UL>

<P><STRONG><a name="[244]"></a>ECRFuncCodeToName</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, extmodules.o(i.ECRFuncCodeToName))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ECRFuncCodeToName &rArr; ReadItemCaption
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadItemCaption
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFuncLook
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
</UL>

<P><STRONG><a name="[246]"></a>ECRFuncCodeToTypeName</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, extmodules.o(i.ECRFuncCodeToTypeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ECRFuncCodeToTypeName
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[247]"></a>ECRVIPLogin</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, iccard.o(i.ECRVIPLogin))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ECRVIPLogin &rArr; GetStringCHN &rArr; LineEditor &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadECRVIPVar
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewECRVIP
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[0]"></a>EP1_IN_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_endp.o(i.EP1_IN_Callback))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>EP3_OUT_Callback</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb_endp.o(i.EP3_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EP3_OUT_Callback &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToUSBQuery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI2_IRQHandler &rArr; Save_Config &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOff
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ApplRam
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24f]"></a>EXTILine_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, keyboard.o(i.EXTILine_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTILine_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardInit
</UL>

<P><STRONG><a name="[24d]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[24e]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[252]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[116]"></a>EmptyComm</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, extmodules.o(i.EmptyComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EmptyComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortRead
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceCMD
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReset
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGPRS
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCom123
</UL>

<P><STRONG><a name="[3cb]"></a>EmptyUSB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_endp.o(i.EmptyUSB))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSBRecord
</UL>

<P><STRONG><a name="[133]"></a>EnableBeep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keyboard.o(i.EnableBeep))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[ef]"></a>EncordDate</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, extmodules.o(i.EncordDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EncordDate
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewECRVIP
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[255]"></a>Exchange2Port</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, program.o(i.Exchange2Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Exchange2Port &rArr; SetComm &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComm
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>

<P><STRONG><a name="[ae]"></a>Excute_CR</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, print_main.o(i.Excute_CR))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_cut
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sel_raster_bit_image
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partial_cut
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Download_Image
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_LF
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_FF
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cut_Paper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>Excute_DLE</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, print_main.o(i.Excute_DLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Excute_DLE &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>Excute_ESC</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, print_main.o(i.Excute_ESC))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Excute_ESC &rArr; Excute_data &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>Excute_FF</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, print_main.o(i.Excute_FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Excute_FF &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>Excute_GS</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, print_main.o(i.Excute_GS))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Excute_GS &rArr; Excute_data &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>Excute_LF</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, print_main.o(i.Excute_LF))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Excute_LF &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[257]"></a>Excute_data</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, print_main.o(i.Excute_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Excute_data &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_GS
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_ESC
</UL>

<P><STRONG><a name="[17d]"></a>ExploreLog</STRONG> (Thumb, 1284 bytes, Stack size 24 bytes, flowbill.o(i.ExploreLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ExploreLog &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputByListItems
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActiveItemStr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[25c]"></a>FSMC_IOInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsmc_sram.o(i.FSMC_IOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSMC_IOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>

<P><STRONG><a name="[25d]"></a>FSMC_Init</STRONG> (Thumb, 168 bytes, Stack size 96 bytes, fsmc_sram.o(i.FSMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FSMC_Init &rArr; FSMC_IOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_IOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[25f]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>

<P><STRONG><a name="[25e]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>

<P><STRONG><a name="[260]"></a>FeedSlip</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, print.o(i.FeedSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FeedSlip &rArr; CmdSlip &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
</UL>

<P><STRONG><a name="[265]"></a>Fixed</STRONG> (Thumb, 2960 bytes, Stack size 48 bytes, fixed.o(i.Fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceCMD
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtInputMask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewReceipt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JFeed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[26e]"></a>FormPrtConfInf</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, hardtest.o(i.FormPrtConfInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = FormPrtConfInf &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
</UL>

<P><STRONG><a name="[270]"></a>FormatAmt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, format.o(i.FormatAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FormatAmt &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
</UL>

<P><STRONG><a name="[1fa]"></a>FormatAmtStr</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, format.o(i.FormatAmtStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FormatAmtStr &rArr; FormatAmt &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotal
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
</UL>

<P><STRONG><a name="[1fd]"></a>FormatBCD</STRONG> (Thumb, 920 bytes, Stack size 36 bytes, extmodules.o(i.FormatBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FormatBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
</UL>

<P><STRONG><a name="[151]"></a>FormatQty</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, format.o(i.FormatQty))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FormatQty &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[1a9]"></a>FormatQtyStr</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, format.o(i.FormatQtyStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FormatQtyStr &rArr; FormatQty &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[271]"></a>FormatStrQtyPriAmt</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, format.o(i.FormatStrQtyPriAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FormatStrQtyPriAmt &rArr; FormatQty &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
</UL>

<P><STRONG><a name="[251]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
</UL>

<P><STRONG><a name="[250]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIOInit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_IOInit
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrIO_Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_IO_Init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNPePwPort_Init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNDataPort_Init
</UL>

<P><STRONG><a name="[2d2]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIOInit
</UL>

<P><STRONG><a name="[32d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNDataPort_Init
</UL>

<P><STRONG><a name="[272]"></a>GPRSCheckACK</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, gprs.o(i.GPRSCheckACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GPRSCheckACK &rArr; GPRSReadAString &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSHand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
</UL>

<P><STRONG><a name="[1be]"></a>GPRSCloseTCPIP</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gprs.o(i.GPRSCloseTCPIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPRSCloseTCPIP &rArr; GPRSWaitForOK &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForOK
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGPRS
</UL>

<P><STRONG><a name="[277]"></a>GPRSConnectAPN</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gprs.o(i.GPRSConnectAPN))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPRSConnectAPN &rArr; GPRSReadAString &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSkipReceived
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
</UL>

<P><STRONG><a name="[279]"></a>GPRSConnect_TCPIP</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, gprs.o(i.GPRSConnect_TCPIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GPRSConnect_TCPIP &rArr; GPRSReadAString &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumToIP
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSkipReceived
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSHand
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
</UL>

<P><STRONG><a name="[27e]"></a>GPRSDecodeECRRecord</STRONG> (Thumb, 172 bytes, Stack size 12 bytes, gprs.o(i.GPRSDecodeECRRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPRSDecodeECRRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[27b]"></a>GPRSDownloadEcrPLUData</STRONG> (Thumb, 920 bytes, Stack size 104 bytes, gprs.o(i.GPRSDownloadEcrPLUData))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDecodeECRRecord
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGPRS
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASC_2_HEX
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToTypeName
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadPTRAIL
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadPLU
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadHEAD
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadDEPT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadCLERK
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadALL
</UL>

<P><STRONG><a name="[275]"></a>GPRSHand</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gprs.o(i.GPRSHand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPRSHand
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSIM_Exist
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCheckACK
</UL>

<P><STRONG><a name="[274]"></a>GPRSReadAString</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gprs.o(i.GPRSReadAString))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GPRSReadAString &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSIM_Exist
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReset
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnectAPN
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCheckACK
</UL>

<P><STRONG><a name="[282]"></a>GPRSRegisterTCPIP</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gprs.o(i.GPRSRegisterTCPIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPRSRegisterTCPIP &rArr; GPRSWaitForOK &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForOK
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
</UL>

<P><STRONG><a name="[283]"></a>GPRSReset</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, gprs.o(i.GPRSReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GPRSReset &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
</UL>

<P><STRONG><a name="[284]"></a>GPRSSIM_Exist</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, gprs.o(i.GPRSSIM_Exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GPRSSIM_Exist &rArr; GPRSSend_ATE0 &rArr; GPRSWaitForOK &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSend_ATE0
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSHand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
</UL>

<P><STRONG><a name="[273]"></a>GPRSSendAString</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gprs.o(i.GPRSSendAString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPRSSendAString &rArr; GPRSSendByte &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendByte
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSend_ATE0
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSIM_Exist
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReset
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRegisterTCPIP
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnectAPN
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCloseTCPIP
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCheckACK
</UL>

<P><STRONG><a name="[286]"></a>GPRSSendByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gprs.o(i.GPRSSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPRSSendByte &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendHEX
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
</UL>

<P><STRONG><a name="[27d]"></a>GPRSSendECRData</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, gprs.o(i.GPRSSendECRData))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GPRSSendECRData &rArr; GPRSCheckACK &rArr; GPRSReadAString &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForOK
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSkipReceived
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendHEX
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendByte
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSHand
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCheckACK
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[288]"></a>GPRSSendECR_HeartBeat</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gprs.o(i.GPRSSendECR_HeartBeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + In Cycle
<LI>Call Chain = GPRSSendECR_HeartBeat &rArr;  GPRSStartGprs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGPRS
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[289]"></a>GPRSSendECR_LOG</STRONG> (Thumb, 718 bytes, Stack size 40 bytes, gprs.o(i.GPRSSendECR_LOG))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GPRSSendECR_LOG &rArr; GPRSStartGprs &rArr; GPRSWaitForReady &rArr; GPRSSendECR_HeartBeat &rArr;  GPRSStartGprs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCheckACK
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGPRS
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_SCANFP
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongtoASC
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG_All
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
</UL>

<P><STRONG><a name="[81]"></a>GPRSSendECR_LOG_All</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gprs.o(i.GPRSSendECR_LOG_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GPRSSendECR_LOG_All &rArr; GPRSSendECR_LOG &rArr; GPRSStartGprs &rArr; GPRSWaitForReady &rArr; GPRSSendECR_HeartBeat &rArr;  GPRSStartGprs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetECRFlow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[287]"></a>GPRSSendHEX</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gprs.o(i.GPRSSendHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPRSSendHEX &rArr; GPRSSendByte &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
</UL>

<P><STRONG><a name="[285]"></a>GPRSSend_ATE0</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gprs.o(i.GPRSSend_ATE0))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GPRSSend_ATE0 &rArr; GPRSWaitForOK &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForOK
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSIM_Exist
</UL>

<P><STRONG><a name="[278]"></a>GPRSSkipReceived</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gprs.o(i.GPRSSkipReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GPRSSkipReceived &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnectAPN
</UL>

<P><STRONG><a name="[27c]"></a>GPRSStartGprs</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, gprs.o(i.GPRSStartGprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GPRSStartGprs &rArr; GPRSWaitForReady &rArr; GPRSSendECR_HeartBeat &rArr;  GPRSStartGprs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSend_ATE0
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReset
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRegisterTCPIP
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnectAPN
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGPRS
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[276]"></a>GPRSWaitForOK</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, gprs.o(i.GPRSWaitForOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GPRSWaitForOK &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSend_ATE0
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRegisterTCPIP
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCloseTCPIP
</UL>

<P><STRONG><a name="[290]"></a>GPRSWaitForReady</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, gprs.o(i.GPRSWaitForReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GPRSWaitForReady &rArr; GPRSSendECR_HeartBeat &rArr;  GPRSStartGprs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawGPRS
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSIM_Exist
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Restart
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>GPRS_DownloadALL</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = GPRS_DownloadALL &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>GPRS_DownloadCLERK</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadCLERK))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = GPRS_DownloadCLERK &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>GPRS_DownloadDEPT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadDEPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = GPRS_DownloadDEPT &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>GPRS_DownloadHEAD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadHEAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = GPRS_DownloadHEAD &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>GPRS_DownloadPLU</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadPLU))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = GPRS_DownloadPLU &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>GPRS_DownloadPTRAIL</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadPTRAIL))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = GPRS_DownloadPTRAIL &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[292]"></a>GPRS_DrawSignal</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, gprs.o(i.GPRS_DrawSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GPRS_DrawSignal &rArr; GPRSReadAString &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawGPRSSignal
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSHand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[281]"></a>GPRS_ProcessRecord</STRONG> (Thumb, 3688 bytes, Stack size 80 bytes, gprs.o(i.GPRS_ProcessRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawGPRS
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICBlock
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetStartAddress
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSalPer
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeptPluKeysCount
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSalPer
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[88]"></a>GPRS_Restart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gprs.o(i.GPRS_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GPRS_Restart &rArr; GPRSWaitForReady &rArr; GPRSSendECR_HeartBeat &rArr;  GPRSStartGprs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>GPRS_SetSendMode</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, gprs.o(i.GPRS_SetSendMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GPRS_SetSendMode &rArr; GetStrFrKBD &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[259]"></a>GetActiveItemStr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(i.GetActiveItemStr))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeyCode
</UL>

<P><STRONG><a name="[2aa]"></a>GetBCDValue</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, program.o(i.GetBCDValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GetBCDValue &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
</UL>

<P><STRONG><a name="[2ab]"></a>GetByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, progopt.o(i.GetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetByte &rArr; GetWordEntry &rArr; CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[2ac]"></a>GetByteValue</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, program.o(i.GetByteValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetByteValue &rArr; GetWordValue &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
</UL>

<P><STRONG><a name="[39c]"></a>GetClerkOffSet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clerk.o(i.GetClerkOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
</UL>

<P><STRONG><a name="[e1]"></a>GetCorrecOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, correc.o(i.GetCorrecOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
</UL>

<P><STRONG><a name="[e4]"></a>GetCurrOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, currency.o(i.GetCurrOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurrTotal
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
</UL>

<P><STRONG><a name="[1e7]"></a>GetCurrency</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, currency.o(i.GetCurrency))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GetCurrency &rArr; Divide &rArr; CompareBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
</UL>

<P><STRONG><a name="[28d]"></a>GetDaysFrom1900</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, extmodules.o(i.GetDaysFrom1900))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDaysFrom1900 &rArr; DaysAMonth
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaysAMonth
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD4toWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeekDay
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[e6]"></a>GetDeptOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, depart.o(i.GetDeptOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
</UL>

<P><STRONG><a name="[2b0]"></a>GetDevicePort</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, progopt.o(i.GetDevicePort))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetDevicePort &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>

<P><STRONG><a name="[e8]"></a>GetDiscOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, discount.o(i.GetDiscOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscTotal
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
</UL>

<P><STRONG><a name="[ea]"></a>GetDrawerOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drawer.o(i.GetDrawerOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDrawerTotal
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
</UL>

<P><STRONG><a name="[1ed]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[24a]"></a>GetEPRxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[1eb]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[2b1]"></a>GetEntry</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.GetEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetEntry &rArr; GetWordEntry &rArr; CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
</UL>

<P><STRONG><a name="[10a]"></a>GetFirmkeyID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, firmkey.o(i.GetFirmkeyID))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[ec]"></a>GetGroupOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, group.o(i.GetGroupOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
</UL>

<P><STRONG><a name="[2b2]"></a>GetHEXValue</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, program.o(i.GetHEXValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GetHEXValue &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
</UL>

<P><STRONG><a name="[2b3]"></a>GetHexBytes</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, progopt.o(i.GetHexBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetHexBytes &rArr; StrToBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[39e]"></a>GetICBlockOffSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iccardblock.o(i.GetICBlockOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICBlock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICBlock
</UL>

<P><STRONG><a name="[2b4]"></a>GetIP</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, program.o(i.GetIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetIP &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumToIP
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPToNum
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
</UL>

<P><STRONG><a name="[25a]"></a>GetInputByListItems</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, menu.o(i.GetInputByListItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetInputByListItems &rArr; ClearEntry &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
</UL>

<P><STRONG><a name="[2b6]"></a>GetInputForMenu</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, firmkey.o(i.GetInputForMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetInputForMenu &rArr; DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
</UL>

<P><STRONG><a name="[2b7]"></a>GetLinkNumber</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, plu.o(i.GetLinkNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetLinkNumber &rArr; GetPluNumber &rArr; BinarySearch &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
</UL>

<P><STRONG><a name="[39f]"></a>GetModiOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, modifier.o(i.GetModiOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
</UL>

<P><STRONG><a name="[2b9]"></a>GetModifier</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, modifier.o(i.GetModifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = GetModifier &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLFStr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[189]"></a>GetNumric</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, chninput.o(i.GetNumric))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputEXASCII
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
</UL>

<P><STRONG><a name="[3a0]"></a>GetOFFPriceOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, offprice.o(i.GetOFFPriceOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOFFPrice
</UL>

<P><STRONG><a name="[224]"></a>GetOpt</STRONG> (Thumb, 2070 bytes, Stack size 32 bytes, progopt.o(i.GetOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GetOpt &rArr; NewTimeDate &rArr; SetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strToBin
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvertBit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexBytes
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByte
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Btoa
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgZone
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgReport
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbInfo
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[f2]"></a>GetPbFOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pb.o(i.GetPbFOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbFTotal
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
</UL>

<P><STRONG><a name="[2bd]"></a>GetPbNumber</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, pb.o(i.GetPbNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetPbNumber &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[f4]"></a>GetPbtOffSet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pb.o(i.GetPbtOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbtTotal
</UL>

<P><STRONG><a name="[16e]"></a>GetPluNumber</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, plu.o(i.GetPluNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetPluNumber &rArr; BinarySearch &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[f6]"></a>GetPluOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, plu.o(i.GetPluOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePluInventory
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[2be]"></a>GetPluPrint</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, depart.o(i.GetPluPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = GetPluPrint &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
</UL>

<P><STRONG><a name="[f8]"></a>GetPoRaOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pora.o(i.GetPoRaOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPoRaTotal
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
</UL>

<P><STRONG><a name="[2bf]"></a>GetPortRate</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, progopt.o(i.GetPortRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetPortRate &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>

<P><STRONG><a name="[2c0]"></a>GetReceiptNumber</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fiscal.o(i.GetReceiptNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetReceiptNumber &rArr; HEXtoASC
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
</UL>

<P><STRONG><a name="[391]"></a>GetRecordSize</STRONG> (Thumb, 1280 bytes, Stack size 28 bytes, memory.o(i.GetRecordSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetRecordSize
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
</UL>

<P><STRONG><a name="[2c1]"></a>GetReport</STRONG> (Thumb, 1090 bytes, Stack size 24 bytes, report.o(i.GetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = GetReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTotal
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpReport
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Plu_XReport
</UL>

<P><STRONG><a name="[196]"></a>GetStrFr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, chndisp.o(i.GetStrFr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetStrFr
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[258]"></a>GetStrFrKBD</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, extmodules.o(i.GetStrFrKBD))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GetStrFrKBD &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
</UL>

<P><STRONG><a name="[2c9]"></a>GetString</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, program.o(i.GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTrailer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysMes
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlipHead
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgReport
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbInfo
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgModi
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHeader
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDraw
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCorrec
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
</UL>

<P><STRONG><a name="[249]"></a>GetStringCHN</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, chninput.o(i.GetStringCHN))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = GetStringCHN &rArr; LineEditor &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
</UL>

<P><STRONG><a name="[1b7]"></a>GetSystemReport</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, report.o(i.GetSystemReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpReport
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[2cc]"></a>GetTaskFromPool</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, print_main.o(i.GetTaskFromPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetTaskFromPool &rArr; CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrGetStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontOffset_char
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateGraphicDots
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
</UL>

<P><STRONG><a name="[fd]"></a>GetTaxOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tax.o(i.GetTaxOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxTotal
</UL>

<P><STRONG><a name="[ff]"></a>GetTenderOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tender.o(i.GetTenderOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTenderTotal
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
</UL>

<P><STRONG><a name="[ee]"></a>GetTimeDate</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, extmodules.o(i.GetTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewECRVIP
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[3a4]"></a>GetTimeZones</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, timer.o(i.GetTimeZones))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
</UL>

<P><STRONG><a name="[2ce]"></a>GetWeekDay</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, extmodules.o(i.GetWeekDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetWeekDay &rArr; GetDaysFrom1900 &rArr; DaysAMonth
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimeDate
</UL>

<P><STRONG><a name="[166]"></a>GetWordEntry</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, general.o(i.GetWordEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetWordEntry &rArr; CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByte
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFunctionEntry
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
</UL>

<P><STRONG><a name="[2ad]"></a>GetWordValue</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, program.o(i.GetWordValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GetWordValue &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WidthofWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
</UL>

<P><STRONG><a name="[12f]"></a>Get_Printer_status</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, print_main.o(i.Get_Printer_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Printer_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TESTPAPER
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrinter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_status
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_printer_status
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_DLE
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Paper
</UL>

<P><STRONG><a name="[2cf]"></a>Get_SerialNum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hw_config.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[15f]"></a>Getch</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, keyboard.o(i.Getch))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakKey
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[181]"></a>GotoXY</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, chndisp.o(i.GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GotoXY &rArr; mEnCursor &rArr; mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>

<P><STRONG><a name="[429]"></a>GregorianDay</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rtc.o(i.GregorianDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GregorianDay
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_settime
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_tm
</UL>

<P><STRONG><a name="[195]"></a>HEXtoASC</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, extmodules.o(i.HEXtoASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HEXtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReceiptNumber
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTime
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
</UL>

<P><STRONG><a name="[20e]"></a>HEXtoASCX0</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, extmodules.o(i.HEXtoASCX0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HEXtoASCX0
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
</UL>

<P><STRONG><a name="[2d1]"></a>HW_GPIOInit</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, interface.o(i.HW_GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_GPIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17e]"></a>HardTest</STRONG> (Thumb, 680 bytes, Stack size 32 bytes, hardtest.o(i.HardTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HardTest &rArr; TestRomRam &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallScreen
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupScreen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawPower
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrnPower
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrinter
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenDrawer
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCustomer
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JFeed
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[2b5]"></a>IPToNum</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, program.o(i.IPToNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IPToNum
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
</UL>

<P><STRONG><a name="[144]"></a>In0_Process</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[31a]"></a>IncRecIndex</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu.o(i.IncRecIndex))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[2f9]"></a>InitAgree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, initappl.o(i.InitAgree))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2e3]"></a>InitApplication</STRONG> (Thumb, 2672 bytes, Stack size 32 bytes, initappl.o(i.InitApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = InitApplication &rArr; SelectClerk &rArr; Collect_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOn
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanKeyboard
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_TestMAC
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Move
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrGetStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetContrast
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mBalnkScreen
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeptPluKeysCount
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_Config
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_ApplRam
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTender
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTax
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSalPer
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPort
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoRa
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOFFPrice
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModifier
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKeyMacro
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroup
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGraph
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrawer
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurr
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCorrec
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitClerk
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAgree
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearApplMemory
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallECRVIP
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPort
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitECRVIP
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearVirtualInput
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComm
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f4]"></a>InitClerk</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, initappl.o(i.InitClerk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitClerk &rArr; WriteClerk &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2ef]"></a>InitCorrec</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, initappl.o(i.InitCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitCorrec &rArr; WriteCorrec &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2f0]"></a>InitCurr</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, initappl.o(i.InitCurr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitCurr &rArr; WriteCurr &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2ed]"></a>InitDept</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, initappl.o(i.InitDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitDept &rArr; WriteDept &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
</UL>

<P><STRONG><a name="[2f1]"></a>InitDisc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, initappl.o(i.InitDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitDisc &rArr; WriteDisc &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2eb]"></a>InitDrawer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, initappl.o(i.InitDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitDrawer &rArr; WriteDrawer &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[236]"></a>InitECRVIP</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iccard.o(i.InitECRVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitECRVIP &rArr; bFlashMBlockErase &rArr; bFlashReadReset &rArr; bFlashPause
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2fa]"></a>InitGraph</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, initappl.o(i.InitGraph))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2ee]"></a>InitGroup</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, initappl.o(i.InitGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitGroup &rArr; WriteGroup &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2fb]"></a>InitKeyMacro</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, initappl.o(i.InitKeyMacro))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InitKeyMacro &rArr; WORDtoASCL
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2f6]"></a>InitModifier</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, initappl.o(i.InitModifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitModifier &rArr; WriteModi &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[417]"></a>InitMonitor</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, monitor.o(i.InitMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f7]"></a>InitOFFPrice</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, initappl.o(i.InitOFFPrice))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitOFFPrice &rArr; WriteOFFPrice &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2f3]"></a>InitPbF</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, initappl.o(i.InitPbF))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitPbF &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2ec]"></a>InitPlu</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, initappl.o(i.InitPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitPlu &rArr; WritePlu &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
</UL>

<P><STRONG><a name="[2ea]"></a>InitPoRa</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, initappl.o(i.InitPoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitPoRa &rArr; WritePoRa &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2f8]"></a>InitPort</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, initappl.o(i.InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = InitPort &rArr; WritePort &rArr; SetComm &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePort
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2f5]"></a>InitSalPer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, initappl.o(i.InitSalPer))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[295]"></a>InitSysFlag</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, program.o(i.InitSysFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = InitSysFlag &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[2f2]"></a>InitTax</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, initappl.o(i.InitTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitTax &rArr; WriteTax &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2e9]"></a>InitTender</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, initappl.o(i.InitTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitTender &rArr; WriteTender &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[298]"></a>Init_Flow</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, flowbill.o(i.Init_Flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_Flow &rArr; bFlashMBlockErase &rArr; bFlashReadReset &rArr; bFlashPause
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLogRam
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
</UL>

<P><STRONG><a name="[2e8]"></a>Initial_DateTime</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, initappl.o(i.Initial_DateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Initial_DateTime &rArr; DateTimeToStr &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStr_Right
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimeDate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[188]"></a>InputEXASCII</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, chninput.o(i.InputEXASCII))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InputEXASCII &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumric
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
</UL>

<P><STRONG><a name="[305]"></a>InputWord</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, extmodules.o(i.InputWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = InputWord &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[28e]"></a>InputYesNo</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, extmodules.o(i.InputYesNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = InputYesNo &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG_All
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[2bb]"></a>InvertBit</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, progopt.o(i.InvertBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InvertBit &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[306]"></a>IssueKp</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, kp.o(i.IssueKp))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = IssueKp &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReceiptNumber
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitOnLine
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
</UL>

<P><STRONG><a name="[191]"></a>JFeed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, extmodules.o(i.JFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = JFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[15e]"></a>KbHit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.KbHit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakKey
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[309]"></a>KeyBoardDeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keyboard.o(i.KeyBoardDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardInit
</UL>

<P><STRONG><a name="[308]"></a>KeyBoardInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, keyboard.o(i.KeyBoardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyBoardInit &rArr; EXTILine_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardDeInit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[11b]"></a>KeyInput</STRONG> (Thumb, 760 bytes, Stack size 16 bytes, main.o(i.KeyInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = KeyInput &rArr; CheckFirmKey &rArr;  CheckFirmKey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputByListItems
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30b]"></a>KpEnd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, kp.o(i.KpEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = KpEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewReceipt
</UL>

<P><STRONG><a name="[30d]"></a>KpHeader</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, kp.o(i.KpHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = KpHeader &rArr; PrintPbKp &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[30e]"></a>LED_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, led_customer.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_Init &rArr; LED_SendData &rArr; LED_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[132]"></a>LED_Off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, led_customer.o(i.LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_Off &rArr; LED_SendData &rArr; LED_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
</UL>

<P><STRONG><a name="[130]"></a>LED_On</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_customer.o(i.LED_On))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKeyboard
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
</UL>

<P><STRONG><a name="[310]"></a>LED_Refresh</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, led_customer.o(i.LED_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_Refresh &rArr; LED_SendData &rArr; LED_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[313]"></a>Leave_LowPowerMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_config.o(i.Leave_LowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Leave_LowPowerMode &rArr; SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[3a8]"></a>LeftShiftBCD</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, extmodules.o(i.LeftShiftBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LeftShiftBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
</UL>

<P><STRONG><a name="[10b]"></a>LineEditor</STRONG> (Thumb, 1896 bytes, Stack size 24 bytes, chninput.o(i.LineEditor))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = LineEditor &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHZRight
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[96]"></a>ListICBlock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iccardblock.o(i.ListICBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ListICBlock &rArr; ReadICBlock &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICBlock
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongtoASCL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>ListItems</STRONG> (Thumb, 2516 bytes, Stack size 104 bytes, menu.o(i.ListItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + In Cycle
<LI>Call Chain = ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallScreen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupScreen
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosOfFuncKey
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluOffSet
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTrailer
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSlipHead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteHeader
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualInputWord
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualInputStr
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRecIndex
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecIndex
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncRecIndex
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIndex
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecRecIndex
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFuncLook
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeyCode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
</UL>

<P><STRONG><a name="[25b]"></a>LoadReceipLog</STRONG> (Thumb, 782 bytes, Stack size 56 bytes, flowbill.o(i.LoadReceipLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = LoadReceipLog &rArr; DispRefreshIC &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEcrNum
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul100
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Long
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
</UL>

<P><STRONG><a name="[26c]"></a>LookPlu</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, plu.o(i.LookPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = LookPlu &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[19e]"></a>MGFunctions</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, extmodules.o(i.MGFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = MGFunctions &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearVirtualInput
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[31d]"></a>MakeTime</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, report2.o(i.MakeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MakeTime &rArr; HEXtoASC
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>

<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[172]"></a>MenuMain</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, menu.o(i.MenuMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MenuMain &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[31e]"></a>Move_Motor</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, print_main.o(i.Move_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Move_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task05_FeedHalf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task03_PrintGraphic
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
</UL>

<P><STRONG><a name="[148]"></a>Multiply</STRONG> (Thumb, 612 bytes, Stack size 88 bytes, extmodules.o(i.Multiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Multiply &rArr; Correct_BCDValue1 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_BCDValue1
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBCDValue12
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
</UL>

<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 2]<UL><LI> usb_prop.o(.data)
<LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[254]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SDConfiguration
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[253]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SDConfiguration
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[320]"></a>NVIC_SDConfiguration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdio_sd.o(i.NVIC_SDConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_SDConfiguration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[a3]"></a>NewProgSysFlag</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, program.o(i.NewProgSysFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = NewProgSysFlag &rArr; InputWord &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetContrast
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[266]"></a>NewReceipt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fixed.o(i.NewReceipt))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = NewReceipt &rArr; KpEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[294]"></a>NewTimeDate</STRONG> (Thumb, 798 bytes, Stack size 16 bytes, timer.o(i.NewTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = NewTimeDate &rArr; SetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimeDate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaysAMonth
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD4toWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[27a]"></a>NumToIP</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, program.o(i.NumToIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NumToIP
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
</UL>

<P><STRONG><a name="[243]"></a>OpenDrawer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drawer.o(i.OpenDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenDrawer
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawerOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenDrawer
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[1b6]"></a>OpenMess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, chndisp.o(i.OpenMess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OpenMess &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[11f]"></a>OutPrint</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i.OutPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrintEx
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrinter
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbOpen
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperator
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNonAdd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDept
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JFeed
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
</UL>

<P><STRONG><a name="[329]"></a>OutPrintEx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.OutPrintEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrinter
</UL>

<P><STRONG><a name="[1ee]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[32b]"></a>PRNDataPort_Init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, print_main.o(i.PRNDataPort_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PRNDataPort_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
</UL>

<P><STRONG><a name="[3b9]"></a>PRNFeedPort_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, print_main.o(i.PRNFeedPort_Init))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
</UL>

<P><STRONG><a name="[330]"></a>PRNPePwPort_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, print_main.o(i.PRNPePwPort_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PRNPePwPort_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
</UL>

<P><STRONG><a name="[331]"></a>PRNTIMER_Init</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, print_main.o(i.PRNTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PRNTIMER_Init &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
</UL>

<P><STRONG><a name="[338]"></a>PRNTempPort_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, print_main.o(i.PRNTempPort_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PRNTempPort_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
</UL>

<P><STRONG><a name="[41c]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
</UL>

<P><STRONG><a name="[1da]"></a>PaidOutRa</STRONG> (Thumb, 872 bytes, Stack size 8 bytes, pora.o(i.PaidOutRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = PaidOutRa &rArr; ProcessBuffer &rArr; ProBuf &rArr; RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPoRaTotal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbBuffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtInputMask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[33b]"></a>PbBuffer</STRONG> (Thumb, 688 bytes, Stack size 16 bytes, pbbuffer.o(i.PbBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PbBuffer &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbBuffer
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
</UL>

<P><STRONG><a name="[33d]"></a>PbFunction</STRONG> (Thumb, 4994 bytes, Stack size 24 bytes, pb.o(i.PbFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = PbFunction &rArr; ProcessBuffer &rArr; ProBuf &rArr; RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbFTotal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewReceipt
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewBal
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbNumber
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[19b]"></a>PbTotal</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, pb.o(i.PbTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbtOffSet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbInfo
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbNumber
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPb
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPBTable
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPb
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>PeriodSkip</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, report.o(i.PeriodSkip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PeriodSkip
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTotal
</UL>

<P><STRONG><a name="[167]"></a>Plu_XReport</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, report.o(i.Plu_XReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Plu_XReport &rArr; GetReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[343]"></a>PointsByECRVIP</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, iccard.o(i.PointsByECRVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PointsByECRVIP &rArr; Collect_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteECRVIPVar
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[31b]"></a>PosOfFuncKey</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, extmodules.o(i.PosOfFuncKey))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[2e2]"></a>Post0_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[346]"></a>PowerOn</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[19d]"></a>PrePrintHead</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, print.o(i.PrePrintHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrePrintHead &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[348]"></a>PrintAllons</STRONG> (Thumb, 1824 bytes, Stack size 40 bytes, print.o(i.PrintAllons))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutExtPrinter
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
</UL>

<P><STRONG><a name="[152]"></a>PrintAmt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i.PrintAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewBal
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[34b]"></a>PrintArticle</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, kp.o(i.PrintArticle))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = PrintArticle &rArr; GetPluPrint &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[2dd]"></a>PrintConfInf</STRONG> (Thumb, 1196 bytes, Stack size 40 bytes, hardtest.o(i.PrintConfInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = PrintConfInf &rArr; DateTimeToStr &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeProto
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[34d]"></a>PrintCorrec</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, report.o(i.PrintCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = PrintCorrec &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[34e]"></a>PrintCorrecReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintCorrecReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintCorrecReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[350]"></a>PrintCurrReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintCurrReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintCurrReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[351]"></a>PrintCurrency</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, report.o(i.PrintCurrency))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintCurrency &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[352]"></a>PrintDept</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, report.o(i.PrintDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PrintDept &rArr; SendRecord &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[354]"></a>PrintDeptReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintDeptReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintDeptReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[177]"></a>PrintDept_PLU</STRONG> (Thumb, 850 bytes, Stack size 16 bytes, plu.o(i.PrintDept_PLU))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = PrintDept_PLU &rArr; RFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[355]"></a>PrintDisc</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, report.o(i.PrintDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintDisc &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[356]"></a>PrintDiscReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintDiscReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintDiscReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[357]"></a>PrintDrawReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintDrawReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintDrawReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[358]"></a>PrintDrawer</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, report.o(i.PrintDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintDrawer &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[234]"></a>PrintECRVIP</STRONG> (Thumb, 630 bytes, Stack size 40 bytes, iccard.o(i.PrintECRVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = PrintECRVIP &rArr; GetStrFrKBD &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASCX0
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeDateToStr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[201]"></a>PrintFlowQtyAmt</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, flowbill.o(i.PrintFlowQtyAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDWidth
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVoid
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTender
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotals
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDirDisc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPoRa
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbTransTo
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbClose
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEnd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDirectDisc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDept
</UL>

<P><STRONG><a name="[17c]"></a>PrintGraphics</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, extmodules.o(i.PrintGraphics))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = PrintGraphics &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[35a]"></a>PrintGroup</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, report.o(i.PrintGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintGroup &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[35b]"></a>PrintGroupReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintGroupReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintGroupReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[2c2]"></a>PrintHead1</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, print.o(i.PrintHead1))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintHead1 &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[233]"></a>PrintICMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iccard.o(i.PrintICMessage))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[235]"></a>PrintKeyboard</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, extmodules.o(i.PrintKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = PrintKeyboard &rArr; RFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
</UL>

<P><STRONG><a name="[1a1]"></a>PrintKp</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, kp.o(i.PrintKp))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckChar
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
</UL>

<P><STRONG><a name="[1f8]"></a>PrintLine</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, print.o(i.PrintLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTender
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>

<P><STRONG><a name="[34c]"></a>PrintLine2</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hardtest.o(i.PrintLine2))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = PrintLine2 &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
</UL>

<P><STRONG><a name="[17a]"></a>PrintMGMenu</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, menu.o(i.PrintMGMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PrintMGMenu &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[267]"></a>PrintMessage</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, general.o(i.PrintMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintMessage &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[35d]"></a>PrintModifiers</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, depart.o(i.PrintModifiers))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintModifiers &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
</UL>

<P><STRONG><a name="[341]"></a>PrintNewBal</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pb.o(i.PrintNewBal))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PrintNewBal &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[26a]"></a>PrintNumber</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fixed.o(i.PrintNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PrintNumber &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[35e]"></a>PrintOpenPb</STRONG> (Thumb, 810 bytes, Stack size 16 bytes, report.o(i.PrintOpenPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PrintOpenPb &rArr; PrintReportHeader &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRange
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreak
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[361]"></a>PrintPb</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, report.o(i.PrintPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintPb &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[362]"></a>PrintPbF</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, report.o(i.PrintPbF))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintPbF &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[363]"></a>PrintPbFReport</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, report.o(i.PrintPbFReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintPbFReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[33f]"></a>PrintPbHeader</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, pb.o(i.PrintPbHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintPbHeader &rArr; PrintQty &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedSlip
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[364]"></a>PrintPbItem</STRONG> (Thumb, 614 bytes, Stack size 48 bytes, pbbuffer.o(i.PrintPbItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = PrintPbItem &rArr; GetPluPrint &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxItem
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
</UL>

<P><STRONG><a name="[30c]"></a>PrintPbKp</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, kp.o(i.PrintPbKp))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintPbKp &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[365]"></a>PrintPbTrailer</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, general.o(i.PrintPbTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = PrintPbTrailer &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
</UL>

<P><STRONG><a name="[366]"></a>PrintPbtReport</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, report.o(i.PrintPbtReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintPbtReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[367]"></a>PrintPlu</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, report.o(i.PrintPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = PrintPlu &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[368]"></a>PrintPluReport</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, report.o(i.PrintPluReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintPluReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[369]"></a>PrintPoRa</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, report.o(i.PrintPoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintPoRa &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[36a]"></a>PrintPoRaReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintPoRaReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintPoRaReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[2c8]"></a>PrintPointReport</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, report.o(i.PrintPointReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PrintPointReport &rArr; PrintTendReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTendReport
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTaxReport
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRaReport
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPluReport
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbtReport
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbFReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroupReport
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawReport
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDiscReport
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeptReport
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrReport
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCorrecReport
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
</UL>

<P><STRONG><a name="[2c7]"></a>PrintPointType</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, report2.o(i.PrintPointType))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTime
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[1aa]"></a>PrintQty</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i.PrintQty))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintQty &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[34a]"></a>PrintQtyAmt</STRONG> (Thumb, 1632 bytes, Stack size 48 bytes, print.o(i.PrintQtyAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFlashChar
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDWidth
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlipMargin
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSlip
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlip
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedSlip
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
</UL>

<P><STRONG><a name="[1fb]"></a>PrintRJ</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, print.o(i.PrintRJ))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakKey
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbTrailer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>

<P><STRONG><a name="[360]"></a>PrintRange</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, report.o(i.PrintRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintRange &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[349]"></a>PrintRegiInfo</STRONG> (Thumb, 922 bytes, Stack size 32 bytes, print.o(i.PrintRegiInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReceiptNumber
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncordDate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlipMargin
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlip
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[34f]"></a>PrintReport</STRONG> (Thumb, 1672 bytes, Stack size 40 bytes, report.o(i.PrintReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComp
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReport
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTender
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRange
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRa
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlu
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbF
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPb
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroup
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawer
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDisc
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrency
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCorrec
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodSkip
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreak
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTendReport
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTaxReport
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRaReport
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPluReport
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbtReport
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbFReport
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroupReport
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawReport
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDiscReport
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeptReport
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrReport
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCorrecReport
</UL>

<P><STRONG><a name="[2ca]"></a>PrintReportHeader</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, report2.o(i.PrintReportHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PrintReportHeader &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[2cb]"></a>PrintReportType</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, report.o(i.PrintReportType))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = PrintReportType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[342]"></a>PrintSaleQty</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, general.o(i.PrintSaleQty))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintSaleQty &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[178]"></a>PrintSetupMenu</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, firmkey.o(i.PrintSetupMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintSetupMenu &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[370]"></a>PrintSlip</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, print.o(i.PrintSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PrintSlip &rArr; CmdSlip &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckChar
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[36d]"></a>PrintSlipPage</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, print.o(i.PrintSlipPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PrintSlipPage &rArr; SlipMargin &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlipMargin
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>

<P><STRONG><a name="[1a0]"></a>PrintStr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, print.o(i.PrintStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintModifiers
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTender
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRange
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRa
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbF
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPb
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroup
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawer
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDisc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrency
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCorrec
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>

<P><STRONG><a name="[2c3]"></a>PrintStr_Center</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, extmodules.o(i.PrintStr_Center))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrePrintHead
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[373]"></a>PrintTax</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, report.o(i.PrintTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintTax &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[36c]"></a>PrintTaxReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintTaxReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintTaxReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[36b]"></a>PrintTendReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintTendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintTendReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[372]"></a>PrintTender</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, report.o(i.PrintTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PrintTender &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[374]"></a>PrintTotal</STRONG> (Thumb, 1564 bytes, Stack size 8 bytes, general.o(i.PrintTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = PrintTotal &rArr; PrintQty &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[2dc]"></a>PrintVersion</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, hardtest.o(i.PrintVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = PrintVersion &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[179]"></a>PrintXZMenu</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, menu.o(i.PrintXZMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintXZMenu &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRecIndex
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecIndex
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncRecIndex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[b8]"></a>Print_Download_Image</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, print_main.o(i.Print_Download_Image))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Print_Download_Image &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[376]"></a>Print_Initial</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, print_main.o(i.Print_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Print_Initial &rArr; SPI_For_Printer &rArr; PRNTempPort_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_printer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37a]"></a>PrnTemperature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, print_main.o(i.PrnTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_CalcHotTime
</UL>

<P><STRONG><a name="[379]"></a>Prn_CalcHotTime</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, print_main.o(i.Prn_CalcHotTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prn_CalcHotTime
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrnTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
</UL>

<P><STRONG><a name="[37b]"></a>Prn_task00_Stop</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, print_main.o(i.Prn_task00_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Prn_task00_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[37d]"></a>Prn_task01_Start</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, print_main.o(i.Prn_task01_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Prn_task01_Start &rArr; GetTaskFromPool &rArr; CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Motor
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Group
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[37f]"></a>Prn_task02_PrintChar</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, print_main.o(i.Prn_task02_PrintChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Prn_task02_PrintChar &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Group
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[380]"></a>Prn_task03_PrintGraphic</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, print_main.o(i.Prn_task03_PrintGraphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Prn_task03_PrintGraphic &rArr; CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateGraphicDots
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[381]"></a>Prn_task04_FeedPaper</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, print_main.o(i.Prn_task04_FeedPaper))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Prn_task04_FeedPaper &rArr; GetTaskFromPool &rArr; CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Motor
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Group
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[382]"></a>Prn_task05_FeedHalf</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, print_main.o(i.Prn_task05_FeedHalf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prn_task05_FeedHalf &rArr; Move_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[383]"></a>ProBuf</STRONG> (Thumb, 3138 bytes, Stack size 88 bytes, buffer.o(i.ProBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = ProBuf &rArr; RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOnLine
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTenderTotal
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPoRaTotal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbtTotal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbFTotal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscTotal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurrTotal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintLayOut
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[268]"></a>ProcessBuffer</STRONG> (Thumb, 1364 bytes, Stack size 32 bytes, buffer.o(i.ProcessBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = ProcessBuffer &rArr; ProBuf &rArr; RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintLayOut
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[1d8]"></a>ProcessDept</STRONG> (Thumb, 3850 bytes, Stack size 72 bytes, depart.o(i.ProcessDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = ProcessDept &rArr; Tender &rArr; ProcessBuffer &rArr; ProBuf &rArr; RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePluInventory
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbBuffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotal
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMaxEntry
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtInputMask
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxItem
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintModifiers
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[385]"></a>ProcessDeptRecord</STRONG> (Thumb, 570 bytes, Stack size 16 bytes, buffer.o(i.ProcessDeptRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ProcessDeptRecord &rArr; CheckMixMatch &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePluInventory
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[387]"></a>ProcessFuncLook</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, fixed.o(i.ProcessFuncLook))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + In Cycle
<LI>Call Chain = ProcessFuncLook &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestChangePointMust
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv100
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[389]"></a>ProcessFunctions</STRONG> (Thumb, 492 bytes, Stack size 8 bytes, main.o(i.ProcessFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFuncLook
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSalPer
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFuncLook
</UL>

<P><STRONG><a name="[11d]"></a>ProcessKey</STRONG> (Thumb, 1178 bytes, Stack size 8 bytes, main.o(i.ProcessKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = ProcessKey &rArr; ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawPower
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestChangePointMust
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFunctionEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38a]"></a>ProcessKeyMacro</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, fixed.o(i.ProcessKeyMacro))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = ProcessKeyMacro &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestChangePointMust
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[38c]"></a>ProcessOnePlu</STRONG> (Thumb, 900 bytes, Stack size 16 bytes, plu.o(i.ProcessOnePlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = ProcessOnePlu &rArr; ProcessDept &rArr; Tender &rArr; ProcessBuffer &rArr; ProBuf &rArr; RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInStore
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
</UL>

<P><STRONG><a name="[340]"></a>ProcessPbBuffer</STRONG> (Thumb, 1324 bytes, Stack size 56 bytes, pbbuffer.o(i.ProcessPbBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ProcessPbBuffer &rArr; PrintPbItem &rArr; GetPluPrint &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxItem
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[1d7]"></a>ProcessPlu</STRONG> (Thumb, 474 bytes, Stack size 64 bytes, plu.o(i.ProcessPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = ProcessPlu &rArr; ProcessOnePlu &rArr; ProcessDept &rArr; Tender &rArr; ProcessBuffer &rArr; ProBuf &rArr; RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[1d4]"></a>ProcessRecord</STRONG> (Thumb, 6064 bytes, Stack size 72 bytes, computer.o(i.ProcessRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ProcessRecord &rArr; GetReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_TestMAC
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICBlock
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ConfigApplVar
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetStartAddress
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSalPer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOFFPrice
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICBlock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReceiptNumber
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeptPluKeysCount
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadBINCLIB
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
</UL>

<P><STRONG><a name="[16b]"></a>ProcessXFunc</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, report2.o(i.ProcessXFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ProcessXFunc &rArr; ExploreLog &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallScreen
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupScreen
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[16c]"></a>ProcessZFunc</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, report2.o(i.ProcessZFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ProcessZFunc &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[22c]"></a>ProgBalance</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, program.o(i.ProgBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ProgBalance &rArr; ProgDevice &rArr; GetDevicePort &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[22b]"></a>ProgBarcodeReader</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, program.o(i.ProgBarcodeReader))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ProgBarcodeReader &rArr; CheckBitValue &rArr; DisplayDecXY &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[21b]"></a>ProgClerk</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, program.o(i.ProgClerk))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgClerk &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[215]"></a>ProgCorrec</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, program.o(i.ProgCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgCorrec &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[217]"></a>ProgCurr</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, program.o(i.ProgCurr))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgCurr &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[23a]"></a>ProgDEPTFields</STRONG> (Thumb, 670 bytes, Stack size 16 bytes, program.o(i.ProgDEPTFields))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ProgDEPTFields &rArr; WaitForYesNo &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordSize
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[227]"></a>ProgDate</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, program.o(i.ProgDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgDate &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[211]"></a>ProgDept</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, program.o(i.ProgDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ProgDept &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[390]"></a>ProgDevice</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, program.o(i.ProgDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ProgDevice &rArr; GetDevicePort &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePort
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPort
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortRate
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicePort
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange2Port
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHost
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBarcodeReader
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
</UL>

<P><STRONG><a name="[216]"></a>ProgDisc</STRONG> (Thumb, 522 bytes, Stack size 8 bytes, program.o(i.ProgDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgDisc &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[218]"></a>ProgDraw</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, program.o(i.ProgDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgDraw &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[237]"></a>ProgECRVIPPoints</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, iccard.o(i.ProgECRVIPPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ProgECRVIPPoints &rArr; PrintECRVIP &rArr; GetStrFrKBD &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteECRVIPVar
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[231]"></a>ProgExtPrinter</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, program.o(i.ProgExtPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ProgExtPrinter &rArr; ProgDevice &rArr; GetDevicePort &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[212]"></a>ProgGroup</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, program.o(i.ProgGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgGroup &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[21e]"></a>ProgHeader</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, program.o(i.ProgHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgHeader &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectGraphic
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[22a]"></a>ProgHost</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, program.o(i.ProgHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ProgHost &rArr; ProgIP &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[22e]"></a>ProgIC</STRONG> (Thumb, 608 bytes, Stack size 24 bytes, program.o(i.ProgIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ProgIC &rArr; CheckBitValue &rArr; DisplayDecXY &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[238]"></a>ProgIP</STRONG> (Thumb, 538 bytes, Stack size 8 bytes, program.o(i.ProgIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgIP &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHost
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[230]"></a>ProgKPrn</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, program.o(i.ProgKPrn))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ProgKPrn &rArr; CheckBitValue &rArr; DisplayDecXY &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[210]"></a>ProgKeyMacro</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, program.o(i.ProgKeyMacro))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ProgKeyMacro &rArr; SelectKeyCode &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeyCode
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[21d]"></a>ProgModi</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, program.o(i.ProgModi))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgModi &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[23c]"></a>ProgNewVIP</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, program.o(i.ProgNewVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgNewVIP &rArr; WaitForYesNo &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewECRVIP
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASCX0
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[229]"></a>ProgOFF</STRONG> (Thumb, 490 bytes, Stack size 8 bytes, program.o(i.ProgOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgOFF &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOFFPrice
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[239]"></a>ProgPLUFields</STRONG> (Thumb, 822 bytes, Stack size 8 bytes, program.o(i.ProgPLUFields))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgPLUFields &rArr; WaitForYesNo &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordSize
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[219]"></a>ProgPbF</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, program.o(i.ProgPbF))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgPbF &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[225]"></a>ProgPbInfo</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, program.o(i.ProgPbInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgPbInfo &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[107]"></a>ProgPlu</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, program.o(i.ProgPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ProgPlu &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[214]"></a>ProgPoRa</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, program.o(i.ProgPoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgPoRa &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[23b]"></a>ProgPointType</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, program.o(i.ProgPointType))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ProgPointType &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[22d]"></a>ProgPrnGraph</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, program.o(i.ProgPrnGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ProgPrnGraph &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectGraphic
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[22f]"></a>ProgPromotion</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, program.o(i.ProgPromotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgPromotion &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[221]"></a>ProgReport</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, program.o(i.ProgReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgReport &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[226]"></a>ProgSalPer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, program.o(i.ProgSalPer))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[232]"></a>ProgSlip</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, program.o(i.ProgSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ProgSlip &rArr; GetByteValue &rArr; GetWordValue &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[220]"></a>ProgSlipHead</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, program.o(i.ProgSlipHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgSlipHead &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[223]"></a>ProgSysFlag</STRONG> (Thumb, 698 bytes, Stack size 24 bytes, program.o(i.ProgSysFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + In Cycle
<LI>Call Chain = ProgSysFlag &rArr;  CheckFirmKey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetContrast
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[222]"></a>ProgSysMes</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, program.o(i.ProgSysMes))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgSysMes &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[21a]"></a>ProgTax</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, program.o(i.ProgTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgTax &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[213]"></a>ProgTend</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, program.o(i.ProgTend))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgTend &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[228]"></a>ProgTime</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, program.o(i.ProgTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgTime &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[21f]"></a>ProgTrailer</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, program.o(i.ProgTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProgTrailer &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectGraphic
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[21c]"></a>ProgZone</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, program.o(i.ProgZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ProgZone &rArr; GetOpt &rArr; NewTimeDate &rArr; SetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[182]"></a>ProgramDump</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, progdump.o(i.ProgramDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ProgramDump &rArr; DisplayOption &rArr; ProgKeyMacro &rArr; SelectKeyCode &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[394]"></a>PromotionBeep</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, general.o(i.PromotionBeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PromotionBeep &rArr; PutsO
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
</UL>

<P><STRONG><a name="[395]"></a>PromtionCheck</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, general.o(i.PromtionCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = PromtionCheck &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBCDPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[1b0]"></a>PutsO</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, led_customer.o(i.PutsO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PutsO
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCustomer
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[131]"></a>PutsO_Saved</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_customer.o(i.PutsO_Saved))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[d5]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
</UL>

<P><STRONG><a name="[d4]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
</UL>

<P><STRONG><a name="[32c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNDataPort_Init
</UL>

<P><STRONG><a name="[d3]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIOInit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_IOInit
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrIO_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_IO_Init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNPePwPort_Init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNDataPort_Init
</UL>

<P><STRONG><a name="[428]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[3c1]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[41e]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
</UL>

<P><STRONG><a name="[41d]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
</UL>

<P><STRONG><a name="[420]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
</UL>

<P><STRONG><a name="[41f]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
</UL>

<P><STRONG><a name="[3d4]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[17b]"></a>RFeed</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, extmodules.o(i.RFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = RFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrePrintHead
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[12b]"></a>RSPrint</STRONG> (Thumb, 1088 bytes, Stack size 40 bytes, print_main.o(i.RSPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeGRBToMyself
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Motor
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Paper
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_cut
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sel_raster_bit_image
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partial_cut
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Download_Image
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cut_Paper
</UL>

<P><STRONG><a name="[399]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[39a]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[424]"></a>RTC_GetCounter</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_gettime
</UL>

<P><STRONG><a name="[423]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
</UL>

<P><STRONG><a name="[398]"></a>RTC_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_settime
</UL>

<P><STRONG><a name="[39b]"></a>RTC_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
</UL>

<P><STRONG><a name="[422]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_settime
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
</UL>

<P><STRONG><a name="[421]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
</UL>

<P><STRONG><a name="[1a3]"></a>RWRand</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hardtest.o(i.RWRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RWRand &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
</UL>

<P><STRONG><a name="[a1]"></a>ReadClerk</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, clerk.o(i.ReadClerk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadClerk &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClerkOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperator
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>ReadComm</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, extmodules.o(i.ReadComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForOK
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSkipReceived
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCom123
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
</UL>

<P><STRONG><a name="[91]"></a>ReadCorrec</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, correc.o(i.ReadCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadCorrec &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCorrecOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCorrec
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCorrec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>ReadCurr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, currency.o(i.ReadCurr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadCurr &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>ReadDept</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, depart.o(i.ReadDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadDept &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeptOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDept
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ReadDisc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, discount.o(i.ReadDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadDisc &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiscOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDisc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>ReadDrawer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drawer.o(i.ReadDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadDrawer &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawerOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDrawerTotal
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDraw
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[248]"></a>ReadECRVIPVar</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, iccard.o(i.ReadECRVIPVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadECRVIPVar
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
</UL>

<P><STRONG><a name="[a2]"></a>ReadFlagsList</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, extmodules.o(i.ReadFlagsList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReadFlagsList &rArr; WORDtoASC
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>ReadFrLogRam</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, flowbill.o(i.ReadFrLogRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadFrLogRam &rArr; bFlashReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLogFor
</UL>

<P><STRONG><a name="[a4]"></a>ReadFromMsg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu.o(i.ReadFromMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadFromMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>ReadFuncLook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, extmodules.o(i.ReadFuncLook))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadFuncLook &rArr; ECRFuncCodeToName &rArr; ReadItemCaption
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>ReadGraphic</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, extmodules.o(i.ReadGraphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadGraphic &rArr; WORDtoASCL
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>ReadGroup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, group.o(i.ReadGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadGroup &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>ReadHeader</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extmodules.o(i.ReadHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[315]"></a>ReadICBlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iccardblock.o(i.ReadICBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadICBlock &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICBlockOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListICBlock
</UL>

<P><STRONG><a name="[245]"></a>ReadItemCaption</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, menu.o(i.ReadItemCaption))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadItemCaption
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRecIndex
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecIndex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
</UL>

<P><STRONG><a name="[8d]"></a>ReadKP</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, kp.o(i.ReadKP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadKP
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>ReadKeyDesList</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, extmodules.o(i.ReadKeyDesList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadKeyDesList
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>ReadKeyMacro</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, extmodules.o(i.ReadKeyMacro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadKeyMacro
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>ReadModi</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modifier.o(i.ReadModi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadModi &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModiOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintModifiers
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgModi
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>ReadNumric</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, extmodules.o(i.ReadNumric))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadNumric &rArr; WORDtoASCL
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>ReadOFFPrice</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, offprice.o(i.ReadOFFPrice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadOFFPrice &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOFFPriceOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>ReadPBTable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pb.o(i.ReadPBTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadPBTable &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>ReadPbF</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pb.o(i.ReadPbF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadPbF &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbFOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>ReadPlu</STRONG> (Thumb, 690 bytes, Stack size 24 bytes, plu.o(i.ReadPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOFFPrice
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluOffSet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPluStock
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>ReadPluStock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, plu.o(i.ReadPluStock))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ReadPluStock &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ReadPoRa</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pora.o(i.ReadPoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadPoRa &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPoRaOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPoRa
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>ReadPort</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(i.ReadPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadPort
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>

<P><STRONG><a name="[128]"></a>ReadRam</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, interface.o(i.ReadRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOFFPrice
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICBlock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_Config
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_ApplRam
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWRand
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbTrailer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
</UL>

<P><STRONG><a name="[317]"></a>ReadRecIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(i.ReadRecIndex))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadItemCaption
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[241]"></a>ReadRecord</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, computer.o(i.ReadRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadRecord &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUSBRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
</UL>

<P><STRONG><a name="[9c]"></a>ReadRepUnit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extmodules.o(i.ReadRepUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadRepUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[2a9]"></a>ReadSalPer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, salper.o(i.ReadSalPer))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>

<P><STRONG><a name="[99]"></a>ReadSlipHeader</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extmodules.o(i.ReadSlipHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadSlipHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>ReadTax</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tax.o(i.ReadTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadTax &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaxOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>ReadTender</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tender.o(i.ReadTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadTender &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTenderOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTender
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>ReadTotal</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, general.o(i.ReadTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTotal
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTotal
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTotal
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[98]"></a>ReadTrail</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extmodules.o(i.ReadTrail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadTrail
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>ReadUSB</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_endp.o(i.ReadUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadUSB &rArr; USBGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSBRecord
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUSBRecord
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
</UL>

<P><STRONG><a name="[3a2]"></a>ReadUSBRecord</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, computer.o(i.ReadUSBRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ReadUSBRecord &rArr; SendUSB &rArr; CDC_Send_DATA &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSB
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUSB
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUSB
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_COMM_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
</UL>

<P><STRONG><a name="[9b]"></a>ReadXZReport</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extmodules.o(i.ReadXZReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadXZReport
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>ReadZone</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, extmodules.o(i.ReadZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadZone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[28a]"></a>Read_Flow</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, flowbill.o(i.Read_Flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_Flow &rArr; ReadFrLogRam &rArr; bFlashReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_SCANFP
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrLogRam
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>

<P><STRONG><a name="[2fc]"></a>RecallECRVIP</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, iccard.o(i.RecallECRVIP))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2fe]"></a>RecallFlowHead</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, flowbill.o(i.RecallFlowHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RecallFlowHead &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrLogRam
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2e0]"></a>RecallScreen</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, chndisp.o(i.RecallScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RecallScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[2ff]"></a>Recall_ApplRam</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, initappl.o(i.Recall_ApplRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Recall_ApplRam &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2e7]"></a>Recall_Config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, initappl.o(i.Recall_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Recall_Config &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[19c]"></a>ReceiptIssue</STRONG> (Thumb, 752 bytes, Stack size 16 bytes, print.o(i.ReceiptIssue))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawerOpen
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbTrailer
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSlip
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[26b]"></a>RegiEnd</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, general.o(i.RegiEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[33e]"></a>RegiInit</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, general.o(i.RegiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = RegiInit &rArr; PrintHead1 &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeZones
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddReceiptNumber
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[1f6]"></a>RegiStart</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, general.o(i.RegiStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = RegiStart &rArr; RegiInit &rArr; PrintHead1 &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[36e]"></a>ReleaseSlip</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, print.o(i.ReleaseSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReleaseSlip &rArr; CmdSlip &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>

<P><STRONG><a name="[2c6]"></a>ReportEnd</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, report2.o(i.ReportEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ReportEnd &rArr; ReceiptIssue &rArr; PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
</UL>

<P><STRONG><a name="[28f]"></a>ResetECRFlow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flowbill.o(i.ResetECRFlow))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG_All
</UL>

<P><STRONG><a name="[371]"></a>ResetReport</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, report.o(i.ResetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ResetReport &rArr; WriteTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[296]"></a>ResetStartAddress</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, initappl.o(i.ResetStartAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>

<P><STRONG><a name="[378]"></a>Reset_printer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, print_main.o(i.Reset_printer))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Initial
</UL>

<P><STRONG><a name="[3a5]"></a>Restart_Motor</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, print_main.o(i.Restart_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Restart_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[3a6]"></a>Resume</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, usb_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Resume &rArr; Resume_Init &rArr; Leave_LowPowerMode &rArr; SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[3a7]"></a>Resume_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_pwr.o(i.Resume_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Resume_Init &rArr; Leave_LowPowerMode &rArr; SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[14b]"></a>RoundBcd</STRONG> (Thumb, 304 bytes, Stack size 28 bytes, extmodules.o(i.RoundBcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RoundBcd &rArr; LeftShiftBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftShiftBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundTaxable
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[14e]"></a>RoundTaxable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tax.o(i.RoundTaxable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RoundTaxable &rArr; AmtRound &rArr; Add &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
</UL>

<P><STRONG><a name="[1c3]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[3b7]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[3b6]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[263]"></a>SDIO_DataConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[3ae]"></a>SDIO_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1c6]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[1c2]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[3b3]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[1c7]"></a>SDIO_GetResponse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[4a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b8]"></a>SDIO_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[3ac]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[264]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[262]"></a>SDIO_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[3b5]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[3ab]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[3b1]"></a>SD_GetCardInfo</STRONG> (Thumb, 784 bytes, Stack size 20 bytes, sdio_sd.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[3ad]"></a>SD_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[3b0]"></a>SD_InitializeCards</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[3b4]"></a>SD_LowLevel_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[3af]"></a>SD_PowerON</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[3aa]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_ProcessIRQSrc &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[3b2]"></a>SD_SelectDeselect</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[32f]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNDataPort_Init
</UL>

<P><STRONG><a name="[377]"></a>SPI_For_Printer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, print_main.o(i.SPI_For_Printer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_For_Printer &rArr; PRNTempPort_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNPePwPort_Init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNFeedPort_Init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNDataPort_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Initial
</UL>

<P><STRONG><a name="[3ce]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>

<P><STRONG><a name="[3cf]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>

<P><STRONG><a name="[32e]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNDataPort_Init
</UL>

<P><STRONG><a name="[2fd]"></a>SRAM_Move</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, fsmc_sram.o(i.SRAM_Move))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[3a1]"></a>SRAM_ReadBuffer</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fsmc_sram.o(i.SRAM_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
</UL>

<P><STRONG><a name="[3ba]"></a>SRAM_WriteBuffer</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fsmc_sram.o(i.SRAM_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ApplRam
</UL>

<P><STRONG><a name="[3bb]"></a>ST7565R_IO_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lcd_st7565r.o(i.ST7565R_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ST7565R_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
</UL>

<P><STRONG><a name="[3bd]"></a>ST7565R_NOP</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_st7565r.o(i.ST7565R_NOP))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_SendData
</UL>

<P><STRONG><a name="[3bc]"></a>ST7565R_SendData</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lcd_st7565r.o(i.ST7565R_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD
</UL>

<P><STRONG><a name="[3be]"></a>ST7565R_WR_CMD</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_st7565r.o(i.ST7565R_WR_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetContrast
</UL>

<P><STRONG><a name="[3bf]"></a>ST7565R_WR_DATA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_st7565r.o(i.ST7565R_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7565R_WR_DATA &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawPower
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawGPRSSignal
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawGPRS
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawChar
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mBalnkScreen
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCursor
</UL>

<P><STRONG><a name="[3c0]"></a>STM32_Initial</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, interface.o(i.STM32_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STM32_Initial &rArr; FSMC_Init &rArr; FSMC_IOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_Init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Start
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SDConfiguration
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardInit
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIOInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28b]"></a>SUB_SCANFP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flowbill.o(i.SUB_SCANFP))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
</UL>

<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24b]"></a>SaveToUSBQuery</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_endp.o(i.SaveToUSBQuery))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[24c]"></a>Save_ApplRam</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, initappl.o(i.Save_ApplRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Save_ApplRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>Save_Config</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, initappl.o(i.Save_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Save_Config &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[38d]"></a>Save_ConfigApplVar</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, initappl.o(i.Save_ConfigApplVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Save_ConfigApplVar &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[17f]"></a>ScreenFeed</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, chndisp.o(i.ScreenFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ScreenFeed &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLFStr
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[180]"></a>ScrollScreen</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, chndisp.o(i.ScrollScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChar
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
</UL>

<P><STRONG><a name="[300]"></a>SelectClerk</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, clerk.o(i.SelectClerk))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SelectClerk &rArr; Collect_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[392]"></a>SelectGraphic</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, program.o(i.SelectGraphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SelectGraphic
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTrailer
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHeader
</UL>

<P><STRONG><a name="[393]"></a>SelectKeyCode</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, extmodules.o(i.SelectKeyCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = SelectKeyCode &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActiveItemStr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
</UL>

<P><STRONG><a name="[38b]"></a>SelectSalPer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, salper.o(i.SelectSalPer))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[117]"></a>SendComm</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, extmodules.o(i.SendComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceCMD
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCom123
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlipMargin
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlip
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedSlip
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendExtPrinter
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
</UL>

<P><STRONG><a name="[35f]"></a>SendComp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, computer.o(i.SendComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SendComp &rArr; SendRecord &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[32a]"></a>SendExtPrinter</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, kp.o(i.SendExtPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendExtPrinter &rArr; CmdExtPrinter &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrintEx
</UL>

<P><STRONG><a name="[38f]"></a>SendMultiLog</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, flowbill.o(i.SendMultiLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = SendMultiLog &rArr; CheckError &rArr; mDrawABox &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_SCANFP
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongtoASC
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[353]"></a>SendRecord</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, computer.o(i.SendRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SendRecord &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSBRecord
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlu
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept
</UL>

<P><STRONG><a name="[3ca]"></a>SendString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, computer.o(i.SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendString &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortWrite
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
</UL>

<P><STRONG><a name="[1d2]"></a>SendUSB</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_endp.o(i.SendUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SendUSB &rArr; CDC_Send_DATA &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Send_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSBRecord
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUSBRecord
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
</UL>

<P><STRONG><a name="[3c9]"></a>SendUSBRecord</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, computer.o(i.SendUSBRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SendUSBRecord &rArr; SendUSB &rArr; CDC_Send_DATA &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSB
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUSB
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUSB
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_COMM_Ready
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSBString
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyUSB
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
</UL>

<P><STRONG><a name="[3cc]"></a>SendUSBString</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_endp.o(i.SendUSBString))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SendUSBString &rArr; CDC_Send_DATA &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Send_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSBRecord
</UL>

<P><STRONG><a name="[3cd]"></a>Send_Byte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, print_main.o(i.Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
</UL>

<P><STRONG><a name="[396]"></a>SetBCDPoint</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, extmodules.o(i.SetBCDPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetBCDPoint &rArr; BcdDiv10 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
</UL>

<P><STRONG><a name="[3f9]"></a>SetBTABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[256]"></a>SetComm</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, extmodules.o(i.SetComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SetComm &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePort
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange2Port
</UL>

<P><STRONG><a name="[2e1]"></a>SetDeviceAddress</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[3fb]"></a>SetEPRxAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[345]"></a>SetEPRxCount</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
</UL>

<P><STRONG><a name="[3fe]"></a>SetEPRxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[13e]"></a>SetEPRxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_DATA
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[3fc]"></a>SetEPTxAddr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[141]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Send_DATA
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[3d7]"></a>SetEPTxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[142]"></a>SetEPTxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPTxValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Send_DATA
</UL>

<P><STRONG><a name="[3fa]"></a>SetEPType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[15a]"></a>SetEditPosition</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, chninput.o(i.SetEditPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetEditPosition &rArr; GotoXY &rArr; mEnCursor &rArr; mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
</UL>

<P><STRONG><a name="[1de]"></a>SetFontOffset_char</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, print_main.o(i.SetFontOffset_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetFontOffset_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>

<P><STRONG><a name="[20f]"></a>SetKeyboard</STRONG> (Thumb, 598 bytes, Stack size 16 bytes, extmodules.o(i.SetKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = SetKeyboard &rArr; SelectKeyCode &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeptPluKeysCount
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeyCode
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[176]"></a>SetPassword</STRONG> (Thumb, 508 bytes, Stack size 72 bytes, extmodules.o(i.SetPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SetPassword &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CenterForDisplay
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
</UL>

<P><STRONG><a name="[384]"></a>SetPrintLayOut</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, buffer.o(i.SetPrintLayOut))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[3f2]"></a>SetRTS</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interface.o(i.SetRTS))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[318]"></a>SetRecIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu.o(i.SetRecIndex))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadItemCaption
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[304]"></a>SetTimeDate</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, extmodules.o(i.SetTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeekDay
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
</UL>

<P><STRONG><a name="[2c4]"></a>SetUpReport</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, report2.o(i.SetUpReport))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
</UL>

<P><STRONG><a name="[3d9]"></a>Set_HotPIN</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, print_main.o(i.Set_HotPIN))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
</UL>

<P><STRONG><a name="[1e0]"></a>Set_Hot_Data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, print_main.o(i.Set_Hot_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateGraphicDots
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>

<P><STRONG><a name="[1e1]"></a>Set_Hot_Group</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, print_main.o(i.Set_Hot_Group))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateGraphicDots
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>

<P><STRONG><a name="[37c]"></a>Set_Motor_Speed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, print_main.o(i.Set_Motor_Speed))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Paper
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend_Motor
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Motor
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Motor
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Motor
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task05_FeedHalf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task03_PrintGraphic
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task00_Stop
</UL>

<P><STRONG><a name="[3d2]"></a>Set_System</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_config.o(i.Set_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_System
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Start
</UL>

<P><STRONG><a name="[3d3]"></a>Set_USBClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(i.Set_USBClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Start
</UL>

<P><STRONG><a name="[145]"></a>Setup0_Process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[36f]"></a>SlipMargin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, print.o(i.SlipMargin))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SlipMargin &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[324]"></a>Standard_ClearFeature</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[5c]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[3f8]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetStringDescriptor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetDeviceDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetConfigDescriptor
</UL>

<P><STRONG><a name="[5d]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[5b]"></a>Standard_GetStatus</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[322]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[323]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[326]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[325]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1e2]"></a>Start_Hot</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, print_main.o(i.Start_Hot))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Start_Hot &rArr; Prn_CalcHotTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HotPIN
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_CalcHotTime
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateGraphicDots
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>

<P><STRONG><a name="[397]"></a>Start_Motor</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, print_main.o(i.Start_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Start_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
</UL>

<P><STRONG><a name="[1a6]"></a>Start_When_Ready</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, print_main.o(i.Start_When_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Start_When_Ready &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Motor
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrinter
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[37e]"></a>Stop_Motor</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, print_main.o(i.Stop_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Stop_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
</UL>

<P><STRONG><a name="[18f]"></a>StoreInBuffer</STRONG> (Thumb, 1234 bytes, Stack size 32 bytes, buffer.o(i.StoreInBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StoreInBuffer &rArr; ReadCorrec &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
</UL>

<P><STRONG><a name="[1f7]"></a>StorePbBuffer</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, pbbuffer.o(i.StorePbBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = StorePbBuffer &rArr; PbBuffer &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
</UL>

<P><STRONG><a name="[2c5]"></a>StorePbInvoice</STRONG> (Thumb, 584 bytes, Stack size 40 bytes, pb.o(i.StorePbInvoice))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = StorePbInvoice &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[165]"></a>StrToBCDValue</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, extmodules.o(i.StrToBCDValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StrToBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInStore
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexBytes
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByte
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
</UL>

<P><STRONG><a name="[de]"></a>SubBCDValue12</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, extmodules.o(i.SubBCDValue12))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SubBCDValue12
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
</UL>

<P><STRONG><a name="[102]"></a>Subtract</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, extmodules.o(i.Subtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Subtract &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBCDValue12
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_BCDValue1
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBCDValue12
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTotal
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPb
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[3f6]"></a>Suspend</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, usb_pwr.o(i.Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[197]"></a>SuspendECR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, firmkey.o(i.SuspendECR))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SuspendECR &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOn
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOff
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendScreen
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[26d]"></a>SuspendReceipt</STRONG> (Thumb, 696 bytes, Stack size 8 bytes, fixed.o(i.SuspendReceipt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + In Cycle
<LI>Call Chain = SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[3da]"></a>SuspendScreen</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, chndisp.o(i.SuspendScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SuspendScreen &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
</UL>

<P><STRONG><a name="[3db]"></a>Suspend_Motor</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, print_main.o(i.Suspend_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Suspend_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1b5]"></a>TESTPAPER</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, print_main.o(i.TESTPAPER))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Print
</UL>

<P><STRONG><a name="[35]"></a>TIM2_IRQHandler</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, print_main.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM2_IRQHandler &rArr; Prn_task04_FeedPaper &rArr; GetTaskFromPool &rArr; CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Paper
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend_Motor
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Motor
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task05_FeedHalf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task03_PrintGraphic
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task00_Stop
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM3_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, print_main.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HotPIN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c6]"></a>TIM5_Init</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, interface.o(i.TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM5_Init &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[4f]"></a>TIM6_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, led_customer.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM6_IRQHandler &rArr; mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCursor
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c7]"></a>TIM6_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, interface.o(i.TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM6_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[50]"></a>TIM7_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, keyboard.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM7_IRQHandler &rArr; keydown &rArr; keyscan
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keydown
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardDeInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30a]"></a>TIM7_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, interface.o(i.TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM7_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardInit
</UL>

<P><STRONG><a name="[333]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[336]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[3dc]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[3e1]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[3df]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[337]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[335]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[334]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[3e0]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[3de]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SelectOnePulseMode))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
</UL>

<P><STRONG><a name="[332]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[386]"></a>Tender</STRONG> (Thumb, 3462 bytes, Stack size 24 bytes, tender.o(i.Tender))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = Tender &rArr; ProcessBuffer &rArr; ProBuf &rArr; RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTenderTotal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbtTotal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurrTotal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDrawerTotal
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtInputMask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Given
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewReceipt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddReceiptNumber
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewBal
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[2d7]"></a>TestBEEP</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hardtest.o(i.TestBEEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TestBEEP &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[388]"></a>TestChangePointMust</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, main.o(i.TestChangePointMust))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFuncLook
</UL>

<P><STRONG><a name="[3e4]"></a>TestCom123</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, extmodules.o(i.TestCom123))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TestCom123 &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
</UL>

<P><STRONG><a name="[2de]"></a>TestCustomer</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hardtest.o(i.TestCustomer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TestCustomer &rArr; PutsO
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[2d6]"></a>TestDateTime</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, hardtest.o(i.TestDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = TestDateTime &rArr; DateTimeToStr &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRtc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[2d4]"></a>TestDisplay</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hardtest.o(i.TestDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TestDisplay &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[314]"></a>TestHZRight</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chndisp.o(i.TestHZRight))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
</UL>

<P><STRONG><a name="[2d9]"></a>TestKeyboard</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hardtest.o(i.TestKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TestKeyboard &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[3e8]"></a>TestLMM</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, interface.o(i.TestLMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestLMM
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
</UL>

<P><STRONG><a name="[2d8]"></a>TestOpenDrawer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hardtest.o(i.TestOpenDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOpenDrawer &rArr; OpenDrawer
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[3e6]"></a>TestPrintGoingOn</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, print_main.o(i.TestPrintGoingOn))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
</UL>

<P><STRONG><a name="[2d3]"></a>TestPrinter</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, hardtest.o(i.TestPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TestPrinter &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrintEx
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[2da]"></a>TestPrnPower</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardtest.o(i.TestPrnPower))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[3e7]"></a>TestRam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interface.o(i.TestRam))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
</UL>

<P><STRONG><a name="[2d5]"></a>TestRomRam</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, hardtest.o(i.TestRomRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = TestRomRam &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRam
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestLMM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintGoingOn
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[3e5]"></a>TestRtc</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, extmodules.o(i.TestRtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TestRtc &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
</UL>

<P><STRONG><a name="[89]"></a>TestSendMess</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, gprs.o(i.TestSendMess))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TestSendMess &rArr; GPRSStartGprs &rArr; GPRSWaitForReady &rArr; GPRSSendECR_HeartBeat &rArr;  GPRSStartGprs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSCheckACK
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGPRS
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongtoASC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[2db]"></a>TestSerial123</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, hardtest.o(i.TestSerial123))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TestSerial123 &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCom123
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[1dc]"></a>TransactionVoid</STRONG> (Thumb, 816 bytes, Stack size 24 bytes, correc.o(i.TransactionVoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = TransactionVoid &rArr; ProcessBuffer &rArr; ProBuf &rArr; RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsO
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFlashChar
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
</UL>

<P><STRONG><a name="[138]"></a>UARTGet</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, usart.o(i.UARTGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortRead
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_status
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_underline_mode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sel_raster_bit_image
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sel_print_mode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Download_Image
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_GS
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_ESC
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_DLE
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Download_Image
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cut_Paper
</UL>

<P><STRONG><a name="[3c2]"></a>UARTInit</STRONG> (Thumb, 614 bytes, Stack size 48 bytes, usart.o(i.UARTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComm
</UL>

<P><STRONG><a name="[13a]"></a>UARTSend</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usart.o(i.UARTSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortWrite
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_status
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_printer_status
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_DLE
</UL>

<P><STRONG><a name="[5e]"></a>UART_GetChar</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.UART_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_GetChar &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(i.InitMonitor)
</UL>
<P><STRONG><a name="[60]"></a>UART_PutChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart.o(i.UART_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_PutChar &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(i.InitMonitor)
</UL>
<P><STRONG><a name="[3ef]"></a>UART_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.UART_PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_PutString &rArr; UART_PutChar &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
</UL>

<P><STRONG><a name="[208]"></a>ULong64toASC</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, extmodules.o(i.ULong64toASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ULong64toASC &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNonAdd
</UL>

<P><STRONG><a name="[26f]"></a>ULongToBCDValue</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, extmodules.o(i.ULongToBCDValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ULongToBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[28c]"></a>ULongtoASC</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, extmodules.o(i.ULongtoASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ULongtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
</UL>

<P><STRONG><a name="[20a]"></a>ULongtoASCL</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, extmodules.o(i.ULongtoASCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ULongtoASCL
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListICBlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
</UL>

<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTS
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTS
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, stm32f10x_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTS
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3eb]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[3ee]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>

<P><STRONG><a name="[3f0]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3ec]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[3ea]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[3e9]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_OverSampling8Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[3f1]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3ed]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>

<P><STRONG><a name="[12d]"></a>USART_printf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usart.o(i.USART_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_printf &rArr; UART_PutString &rArr; UART_PutChar &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutString
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
</UL>

<P><STRONG><a name="[3a3]"></a>USBGet</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, usb_endp.o(i.USBGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUSB
</UL>

<P><STRONG><a name="[43]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USBWakeUp_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBWakeUp_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d5]"></a>USB_COMM_Ready</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_app.o(i.USB_COMM_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_COMM_Ready &rArr; CDC_Receive_DATA &rArr; SetEPRxValid
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUSBRecord
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUSBRecord
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
</UL>

<P><STRONG><a name="[347]"></a>USB_Cable_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_config.o(i.USB_Cable_Config))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[3f7]"></a>USB_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_init.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Start
</UL>

<P><STRONG><a name="[3f4]"></a>USB_Interrupts_Config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hw_config.o(i.USB_Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Start
</UL>

<P><STRONG><a name="[3f5]"></a>USB_Istr</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2d]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3ff]"></a>USB_SIL_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_sil.o(i.USB_SIL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[3c8]"></a>USB_Start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_app.o(i.USB_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Start &rArr; USB_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[61]"></a>UpdateBIOS</STRONG> (Thumb, 1740 bytes, Stack size 0 bytes, ecr_iap.o(i.UpdateBIOS))
<BR>[Address Reference Count : 1]<UL><LI> computer.o(i.ProcessRecord)
</UL>
<P><STRONG><a name="[33c]"></a>UpdatePbRecord</STRONG> (Thumb, 738 bytes, Stack size 16 bytes, pbbuffer.o(i.UpdatePbRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UpdatePbRecord &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
</UL>

<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>UserToPMABufferCopy</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Send_DATA
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[316]"></a>VirtualInputStr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, menu.o(i.VirtualInputStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VirtualInputStr
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[31c]"></a>VirtualInputWord</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, menu.o(i.VirtualInputWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VirtualInputWord &rArr; WORDtoASCL
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[7]"></a>Virtual_Com_Port_Data_Setup</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usb_prop.o(i.Virtual_Com_Port_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Virtual_Com_Port_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_GetConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Virtual_Com_Port_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>Virtual_Com_Port_GetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_GetLineCoding))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[c]"></a>Virtual_Com_Port_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_prop.o(i.Virtual_Com_Port_GetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Virtual_Com_Port_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Virtual_Com_Port_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Virtual_Com_Port_NoData_Setup</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_NoData_Setup))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Virtual_Com_Port_Reset</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Virtual_Com_Port_Reset &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Virtual_Com_Port_SetConfiguration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_SetConfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Virtual_Com_Port_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>Virtual_Com_Port_SetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_SetLineCoding))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[5]"></a>Virtual_Com_Port_Status_In</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_Status_In))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Virtual_Com_Port_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Virtual_Com_Port_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Virtual_Com_Port_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[192]"></a>WORDtoASC</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, extmodules.o(i.WORDtoASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WORDtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOFFPrice
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbTransTo
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbOpen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlagsList
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvertBit
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
</UL>

<P><STRONG><a name="[164]"></a>WORDtoASCL</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, extmodules.o(i.WORDtoASCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WORDtoASCL
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModifier
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKeyMacro
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroup
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitClerk
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSConnect_TCPIP
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgZone
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNumric
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGraphic
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualInputWord
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIndex
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>

<P><STRONG><a name="[1a4]"></a>WORDtoASCZero</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, extmodules.o(i.WORDtoASCZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WORDtoASCZero
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRange
</UL>

<P><STRONG><a name="[2b8]"></a>WORDtoBCD</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, extmodules.o(i.WORDtoBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WORDtoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[171]"></a>WaitForYesNo</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, extmodules.o(i.WaitForYesNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = WaitForYesNo &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CenterForDisplay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[307]"></a>WaitOnLine</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, extmodules.o(i.WaitOnLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WaitOnLine &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortRead
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
</UL>

<P><STRONG><a name="[3dd]"></a>Wait_Paper</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, print_main.o(i.Wait_Paper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wait_Paper
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[20c]"></a>WidthofWORD</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, extmodules.o(i.WidthofWORD))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
</UL>

<P><STRONG><a name="[29e]"></a>WriteClerk</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clerk.o(i.WriteClerk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteClerk &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClerkOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitClerk
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
</UL>

<P><STRONG><a name="[2a8]"></a>WriteCorrec</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, correc.o(i.WriteCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteCorrec &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCorrecOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCorrec
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCorrec
</UL>

<P><STRONG><a name="[2a7]"></a>WriteCurr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, currency.o(i.WriteCurr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteCurr &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
</UL>

<P><STRONG><a name="[29b]"></a>WriteDept</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, depart.o(i.WriteDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteDept &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeptOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
</UL>

<P><STRONG><a name="[2a6]"></a>WriteDisc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, discount.o(i.WriteDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteDisc &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiscOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
</UL>

<P><STRONG><a name="[2a5]"></a>WriteDrawer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drawer.o(i.WriteDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteDrawer &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawerOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrawer
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDraw
</UL>

<P><STRONG><a name="[344]"></a>WriteECRVIPVar</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, iccard.o(i.WriteECRVIPVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteECRVIPVar &rArr; bFlashProgram &rArr; wFlashProgramAWord &rArr; bFlashReadReset &rArr; bFlashPause
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashProgram
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
</UL>

<P><STRONG><a name="[29c]"></a>WriteGroup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, group.o(i.WriteGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteGroup &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroup
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
</UL>

<P><STRONG><a name="[29a]"></a>WriteICBlock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iccardblock.o(i.WriteICBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteICBlock &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICBlockOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>

<P><STRONG><a name="[2a1]"></a>WriteModi</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, modifier.o(i.WriteModi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteModi &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModiOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModifier
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgModi
</UL>

<P><STRONG><a name="[29d]"></a>WriteOFFPrice</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, offprice.o(i.WriteOFFPrice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteOFFPrice &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOFFPriceOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOFFPrice
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
</UL>

<P><STRONG><a name="[2a4]"></a>WritePbF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pb.o(i.WritePbF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WritePbF &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbFOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
</UL>

<P><STRONG><a name="[299]"></a>WritePlu</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, plu.o(i.WritePlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WritePlu &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
</UL>

<P><STRONG><a name="[1b8]"></a>WritePluInventory</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, plu.o(i.WritePluInventory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WritePluInventory &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
</UL>

<P><STRONG><a name="[1a8]"></a>WritePlu_At</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, plu.o(i.WritePlu_At))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WritePlu_At &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
</UL>

<P><STRONG><a name="[2a3]"></a>WritePoRa</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pora.o(i.WritePoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WritePoRa &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPoRaOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoRa
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
</UL>

<P><STRONG><a name="[303]"></a>WritePort</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, port.o(i.WritePort))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = WritePort &rArr; SetComm &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComm
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPort
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>

<P><STRONG><a name="[1a7]"></a>WriteRam</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, interface.o(i.WriteRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePluInventory
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICBlock
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ConfigApplVar
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWRand
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTotal
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu_At
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbNumber
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[2a0]"></a>WriteSalPer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, salper.o(i.WriteSalPer))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>

<P><STRONG><a name="[29f]"></a>WriteTax</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tax.o(i.WriteTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteTax &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaxOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTax
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
</UL>

<P><STRONG><a name="[2a2]"></a>WriteTender</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tender.o(i.WriteTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteTender &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTenderOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTender
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
</UL>

<P><STRONG><a name="[1ce]"></a>WriteToLogRam</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, flowbill.o(i.WriteToLogRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteToLogRam &rArr; bFlashProgram &rArr; wFlashProgramAWord &rArr; bFlashReadReset &rArr; bFlashPause
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashProgram
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLogFor
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
</UL>

<P><STRONG><a name="[101]"></a>WriteTotal</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, general.o(i.WriteTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTotal
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReport
</UL>

<P><STRONG><a name="[401]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[43e]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[113]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeDateToStr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDDateTimeToStr
</UL>

<P><STRONG><a name="[403]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[43f]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[440]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[3f3]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
</UL>

<P><STRONG><a name="[441]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[442]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[443]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[444]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[445]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[40c]"></a>bFlashAutoSelect</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, flashb.o(i.bFlashAutoSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bFlashAutoSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashWrite
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashProgram
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
</UL>

<P><STRONG><a name="[40f]"></a>bFlashDataToggle</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, flashb.o(i.bFlashDataToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bFlashDataToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wFlashProgramAWord
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
</UL>

<P><STRONG><a name="[302]"></a>bFlashMBlockErase</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, flashb.o(i.bFlashMBlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bFlashMBlockErase &rArr; bFlashReadReset &rArr; bFlashPause
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashWrite
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashReadReset
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashRead
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashDataToggle
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashAutoSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteECRVIPVar
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLogRam
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitECRVIP
</UL>

<P><STRONG><a name="[412]"></a>bFlashPause</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flashb.o(i.bFlashPause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bFlashPause
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashReadReset
</UL>

<P><STRONG><a name="[f0]"></a>bFlashProgram</STRONG> (Thumb, 250 bytes, Stack size 36 bytes, flashb.o(i.bFlashProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bFlashProgram &rArr; wFlashProgramAWord &rArr; bFlashReadReset &rArr; bFlashPause
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wFlashProgramAWord
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashAutoSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteECRVIPVar
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewECRVIP
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLogRam
</UL>

<P><STRONG><a name="[40e]"></a>bFlashRead</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flashb.o(i.bFlashRead))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashDataToggle
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashAutoSelect
</UL>

<P><STRONG><a name="[39d]"></a>bFlashReadBuffer</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, flashb.o(i.bFlashReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bFlashReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrLogRam
</UL>

<P><STRONG><a name="[410]"></a>bFlashReadReset</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, flashb.o(i.bFlashReadReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bFlashReadReset &rArr; bFlashPause
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashWrite
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashPause
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wFlashProgramAWord
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
</UL>

<P><STRONG><a name="[40d]"></a>bFlashWrite</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flashb.o(i.bFlashWrite))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wFlashProgramAWord
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashReadReset
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashAutoSelect
</UL>

<P><STRONG><a name="[3e2]"></a>keydown</STRONG> (Thumb, 570 bytes, Stack size 8 bytes, keyboard.o(i.keydown))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = keydown &rArr; keyscan
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[413]"></a>keyscan</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, keyboard.o(i.keyscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = keyscan
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keydown
</UL>

<P><STRONG><a name="[2e6]"></a>mBalnkScreen</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, lcd_st7565r.o(i.mBalnkScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mBalnkScreen &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[105]"></a>mClearScreen</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lcd_st7565r.o(i.mClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mClearScreen &rArr; GotoXY &rArr; mEnCursor &rArr; mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupScreen
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSendMess
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG_All
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReset
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[1ff]"></a>mDispCharXY</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lcd_st7565r.o(i.mDispCharXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChar
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendScreen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
</UL>

<P><STRONG><a name="[1fe]"></a>mDispCursor</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lcd_st7565r.o(i.mDispCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[416]"></a>mDispLogo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_st7565r.o(i.mDispLogo))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
</UL>

<P><STRONG><a name="[162]"></a>mDispStringXY</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lcd_st7565r.o(i.mDispStringXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[160]"></a>mDrawABox</STRONG> (Thumb, 298 bytes, Stack size 28 bytes, lcd_st7565r.o(i.mDrawABox))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mDrawABox &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[415]"></a>mDrawChar</STRONG> (Thumb, 206 bytes, Stack size 28 bytes, lcd_st7565r.o(i.mDrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
</UL>

<P><STRONG><a name="[291]"></a>mDrawGPRS</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, lcd_st7565r.o(i.mDrawGPRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mDrawGPRS &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
</UL>

<P><STRONG><a name="[293]"></a>mDrawGPRSSignal</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, lcd_st7565r.o(i.mDrawGPRSSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mDrawGPRSSignal &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
</UL>

<P><STRONG><a name="[2df]"></a>mDrawPower</STRONG> (Thumb, 246 bytes, Stack size 28 bytes, lcd_st7565r.o(i.mDrawPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mDrawPower &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>mEnCursor</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd_st7565r.o(i.mEnCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mEnCursor &rArr; mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[3c4]"></a>mInitialLCD</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lcd_st7565r.o(i.mInitialLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mInitialLCD &rArr; mClearScreen &rArr; GotoXY &rArr; mEnCursor &rArr; mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOn
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetContrast
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispLogo
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_NOP
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[1af]"></a>mLightLCDOff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd_st7565r.o(i.mLightLCDOff))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
</UL>

<P><STRONG><a name="[18a]"></a>mLightLCDOn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd_st7565r.o(i.mLightLCDOn))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKeyboard
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
</UL>

<P><STRONG><a name="[187]"></a>mRefreshLine</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcd_st7565r.o(i.mRefreshLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallScreen
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMess
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
</UL>

<P><STRONG><a name="[301]"></a>mSetContrast</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_st7565r.o(i.mSetContrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mSetContrast &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[328]"></a>mSetState</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lcd_st7565r.o(i.mSetState))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMess
</UL>

<P><STRONG><a name="[55]"></a>main</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = main &rArr; BarCode &rArr; ProcessKey &rArr; ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMonitor
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrGetStatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMess
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawPower
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Initial
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrinter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[42a]"></a>mktimev</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, rtc.o(i.mktimev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mktimev
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_settime
</UL>

<P><STRONG><a name="[1c0]"></a>msDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, interface.o(i.msDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCustomer
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
</UL>

<P><STRONG><a name="[b3]"></a>partial_cut</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, print_main.o(i.partial_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = partial_cut &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[418]"></a>pwrADCCtrl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pwr_ctrl.o(i.pwrADCCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwrADCCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_Init
</UL>

<P><STRONG><a name="[2cd]"></a>pwrGetStatus</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, pwr_ctrl.o(i.pwrGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pwrGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
</UL>

<P><STRONG><a name="[41a]"></a>pwrIO_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, pwr_ctrl.o(i.pwrIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwrIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_Init
</UL>

<P><STRONG><a name="[3c3]"></a>pwr_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwr_ctrl.o(i.pwr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pwr_Init &rArr; ADC1_DMA_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrIO_Init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrADCCtrl
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[41b]"></a>rtc_Config</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtc.o(i.rtc_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_Config &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_settime
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[134]"></a>rtc_gettime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtc.o(i.rtc_gettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtc_gettime &rArr; to_tm &rArr; GregorianDay
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_tm
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[3c5]"></a>rtc_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rtc.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc_init &rArr; rtc_Config &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[135]"></a>rtc_settime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtc.o(i.rtc_settime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtc_settime &rArr; rtc_Config &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Config
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktimev
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GregorianDay
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[b0]"></a>sel_print_mode</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, print_main.o(i.sel_print_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sel_print_mode &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>sel_raster_bit_image</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, print_main.o(i.sel_raster_bit_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sel_raster_bit_image &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[414]"></a>st7565SetXY</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lcd_st7565r.o(i.st7565SetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawPower
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawGPRSSignal
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawGPRS
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawChar
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mBalnkScreen
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCursor
</UL>

<P><STRONG><a name="[2bc]"></a>strToBin</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, progopt.o(i.strToBin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strToBin
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[425]"></a>to_tm</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, rtc.o(i.to_tm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = to_tm &rArr; GregorianDay
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GregorianDay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_gettime
</UL>

<P><STRONG><a name="[b2]"></a>total_cut</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, print_main.o(i.total_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = total_cut &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>turn_underline_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, print_main.o(i.turn_underline_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = turn_underline_mode &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>tx_printer_status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, print_main.o(i.tx_printer_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_printer_status &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>tx_status</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, print_main.o(i.tx_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tx_status &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>usDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, interface.o(i.usDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_TestMAC
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Send_DATA
</UL>

<P><STRONG><a name="[411]"></a>wFlashProgramAWord</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, flashb.o(i.wFlashProgramAWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wFlashProgramAWord &rArr; bFlashReadReset &rArr; bFlashPause
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wFlashWrite
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashWrite
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashReadReset
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashDataToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashProgram
</UL>

<P><STRONG><a name="[42b]"></a>wFlashWrite</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flashb.o(i.wFlashWrite))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wFlashProgramAWord
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c1]"></a>CmdError</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sdio_sd.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1c5]"></a>CmdResp1Error</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[1c8]"></a>CmdResp2Error</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, sdio_sd.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[1c9]"></a>CmdResp3Error</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sdio_sd.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1ca]"></a>CmdResp6Error</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, sdio_sd.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[1cb]"></a>CmdResp7Error</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sdio_sd.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[261]"></a>FindSCR</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, sdio_sd.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[3a9]"></a>SDEnWideBus</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, sdio_sd.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[312]"></a>LED_Delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led_customer.o(i.LED_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendBit
</UL>

<P><STRONG><a name="[311]"></a>LED_SendBit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, led_customer.o(i.LED_SendBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendData
</UL>

<P><STRONG><a name="[30f]"></a>LED_SendData</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, led_customer.o(i.LED_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_SendData &rArr; LED_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendBit
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Refresh
</UL>

<P><STRONG><a name="[3d0]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3d1]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[2d0]"></a>IntToUnicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hw_config.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[1ea]"></a>DataStageIn</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[1ec]"></a>DataStageOut</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[1ef]"></a>Data_Setup0</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[321]"></a>NoData_Setup0</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[402]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[408]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[407]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[64]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[405]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[404]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[40a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[409]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[65]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
